import random
from telebot import types
from utils import db, bot

cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11]  # 10 - –≤–∞–ª–µ—Ç, –¥–∞–º–∞, –∫–æ—Ä–æ–ª—å; 11 - —Ç—É–∑

@bot.message_handler(commands=['casino'])
def casino(message):
    markup = types.InlineKeyboardMarkup()
    btn_blackjack = types.InlineKeyboardButton("–ë–ª–µ–∫–¥–∂–µ–∫", callback_data="game_blackjack")
    btn_roulette = types.InlineKeyboardButton("–†—É–ª–µ—Ç–∫–∞", callback_data="game_roulette")
    markup.add(btn_blackjack, btn_roulette)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('game_'))
def game_selection(call):
    if call.data == "game_blackjack":
        send_blackjack_rules(call.message)
    elif call.data == "game_roulette":
        send_roulette_rules(call.message)

def send_blackjack_rules(message):
    rules = ("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –ë–ª–µ–∫–¥–∂–µ–∫:\n"
             "–¶–µ–ª—å –∏–≥—Ä—ã - –Ω–∞–±—Ä–∞—Ç—å 21 –æ—á–∫–æ –∏–ª–∏ –±–ª–∏–∑–∫–æ–µ –∫ —ç—Ç–æ–º—É —á–∏—Å–ª–æ, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è –µ–≥–æ.\n"
             "–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –∏–º–µ–µ—Ç —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: —á–∏—Å–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É, –∫–∞—Ä—Ç–∏–Ω–∫–∏ - 10 –æ—á–∫–æ–≤, —Ç—É–∑ - 1 –∏–ª–∏ 11 –æ—á–∫–æ–≤.")
    markup = types.InlineKeyboardMarkup()
    btn_next = types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="bet_blackjack")
    markup.add(btn_next)
    bot.send_message(message.chat.id, rules, reply_markup=markup)

def send_roulette_rules(message):
    rules = ("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –†—É–ª–µ—Ç–∫–∞:\n"
             "–¶–µ–ª—å –∏–≥—Ä—ã - —É–≥–∞–¥–∞—Ç—å –Ω–æ–º–µ—Ä –∏–ª–∏ —Ü–≤–µ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —à–∞—Ä–∏–∫.\n"
             "–ú–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä–∞, —Ü–≤–µ—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã —á–∏—Å–µ–ª.")
    markup = types.InlineKeyboardMarkup()
    btn_next = types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="bet_roulette")
    markup.add(btn_next)
    bot.send_message(message.chat.id, rules, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "bet_blackjack")
def bet_blackjack(call):
    user_id = call.from_user.id
    earnings = db.fetch_user_earnings(user_id)
    if earnings > 0:
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
        bot.register_next_step_handler(msg, start_blackjack)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")

def start_blackjack(message):
    user_id = message.from_user.id
    try:
        bet = float(message.text)
        if bet <= 0:
            raise ValueError("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))
        return

    earnings = db.fetch_user_earnings(user_id)
    if bet > earnings:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    player_hand = [random.choice(cards)]
    dealer_hand = [random.choice(cards)]

    db.execute_query("INSERT OR REPLACE INTO blackjack_game (user_id, player_hand, dealer_hand, bet) VALUES (?, ?, ?, ?)",
                     (user_id, str(player_hand), str(dealer_hand), bet))

    send_blackjack_status(message.chat.id, player_hand, dealer_hand, user_id)

def send_blackjack_status(chat_id, player_hand, dealer_hand, user_id):
    player_score = sum(player_hand)
    dealer_score = dealer_hand[0]
    markup = types.InlineKeyboardMarkup()
    btn_hit = types.InlineKeyboardButton("–í–∑—è—Ç—å", callback_data=f"hit_{user_id}")
    btn_stand = types.InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç", callback_data=f"stand_{user_id}")
    markup.add(btn_hit, btn_stand)
    bot.send_message(chat_id, f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player_hand} (–æ—á–∫–æ–≤: {player_score})\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {dealer_hand[0]}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('hit_'))
def hit(call):
    user_id = int(call.data.split('_')[1])
    game = db.fetch_one("SELECT player_hand, dealer_hand, bet FROM blackjack_game WHERE user_id = ?", (user_id,))
    if game:
        player_hand = eval(game[0])
        dealer_hand = eval(game[1])
        bet = game[2]

        player_hand.append(random.choice(cards))

        if sum(player_hand) > 21:
            bot.send_message(call.message.chat.id, f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player_hand} (–æ—á–∫–æ–≤: {sum(player_hand)})\n–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")
            db.update_earnings(user_id, -bet)
            db.execute_query("DELETE FROM blackjack_game WHERE user_id = ?", (user_id,))
        else:
            send_blackjack_status(call.message.chat.id, player_hand, dealer_hand, user_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('stand_'))
def stand(call):
    user_id = int(call.data.split('_')[1])
    game = db.fetch_one("SELECT player_hand, dealer_hand, bet FROM blackjack_game WHERE user_id = ?", (user_id,))
    if game:
        player_hand = eval(game[0])
        dealer_hand = eval(game[1])
        bet = game[2]

        while sum(dealer_hand) < 17:
            dealer_hand.append(random.choice(cards))

        player_score = sum(player_hand)
        dealer_score = sum(dealer_hand)

        result_msg = f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player_hand} (–æ—á–∫–æ–≤: {player_score})\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {dealer_hand} (–æ—á–∫–æ–≤: {dealer_score})\n"
        if dealer_score > 21 or player_score > dealer_score:
            result_msg += "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
            db.update_earnings(user_id, bet)
        else:
            result_msg += "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
            db.update_earnings(user_id, -bet)

        bot.send_message(call.message.chat.id, result_msg)
        db.execute_query("DELETE FROM blackjack_game WHERE user_id = ?", (user_id,))

@bot.callback_query_handler(func=lambda call: call.data == "bet_roulette")
def bet_roulette(call):
    user_id = call.from_user.id
    earnings = db.fetch_user_earnings(user_id)
    if earnings > 0:
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
        bot.register_next_step_handler(msg, choose_roulette_color)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")

def choose_roulette_color(message):
    user_id = message.from_user.id
    try:
        bet = float(message.text)
        if bet <= 0:
            raise ValueError("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))
        return

    earnings = db.fetch_user_earnings(user_id)
    if bet > earnings:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    markup = types.InlineKeyboardMarkup()
    btn_red = types.InlineKeyboardButton("–ö—Ä–∞—Å–Ω—ã–π", callback_data=f"color_red_{bet}")
    btn_black = types.InlineKeyboardButton("–ß—ë—Ä–Ω—ã–π", callback_data=f"color_black_{bet}")
    btn_green = types.InlineKeyboardButton("–ó–µ–ª—ë–Ω—ã–π", callback_data=f"color_green_{bet}")
    markup.add(btn_red, btn_black, btn_green)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('color_'))
def spin_roulette(call):
    color = call.data.split('_')[1]
    bet = float(call.data.split('_')[2])
    user_id = call.from_user.id

    emoji_wheel = ["üî¥", "‚ö´Ô∏è", "üî¥", "‚ö´Ô∏è", "üü¢", "‚ö´Ô∏è", "üî¥", "‚ö´Ô∏è", "üî¥"] * 4 + ["üü¢"] * 2
    random.shuffle(emoji_wheel)
    spin_position = random.randint(0, len(emoji_wheel) - 1)

    def display_wheel(position, message_id):
        display = emoji_wheel[position:] + emoji_wheel[:position]
        display = display[:6]
        bot.edit_message_text(f"–†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è:\n{''.join(display)}\n-------^-------", call.message.chat.id, message_id)
        return position + 1 if position < len(emoji_wheel) - 1 else 0

    message_id = bot.send_message(call.message.chat.id, "–†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è:\nüî¥‚ö´Ô∏èüî¥‚ö´Ô∏èüü¢‚ö´Ô∏è\n-------^-------").message_id

    for _ in range(36):
        spin_position = display_wheel(spin_position, message_id)
        time.sleep(0.1)

    result_color = emoji_wheel[spin_position]
    win = False
    if (color == "red" and result_color == "üî¥") or (color == "black" and result_color == "‚ö´Ô∏è"):
        win = True
        payout = bet * 2
    elif color == "green" and result_color == "üü¢":
        win = True
        payout = bet * 10
    else:
        payout = -bet

    db.update_earnings(user_id, payout)
    result_msg = f"–†—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –Ω–∞ {result_color}.\n"
    result_msg += "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!" if win else "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
    bot.send_message(call.message.chat.id, result_msg)
