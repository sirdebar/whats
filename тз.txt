–ü—Ä–∏–≤–µ—Ç, –≤ –º–æ–π –∫–æ–¥ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –¥–æ–±–∞–≤—å –≤—Å–µ –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ 5 –ø—É–Ω–∫—Ç–æ–≤, –Ω–∞–¥ –∫–∞–∂–¥—ã–º –ø–æ–¥—É–º–∏–∞–π —Ç—â–∞—Ç–µ–ª—å–Ω–æ, –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–ª–∏–∑—É–π –≤—Å–µ 5, –±–µ–∑ –æ—à–∏–±–æ–∫.

1. –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞. –≠—Ç–æ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç  –∏–º–µ—Ç—å –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:(–¥–æ–±–∞–≤–ª—è–π —Å–º–∞–π–ª–∏–∫–∏) . –í—Ö–æ–¥—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞ –ø—Ä–æ—à–ª—ã–µ 7 –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏). 
–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤(–∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏ –∏ –∏—Ö –∞–π–¥–∏) –∏ –Ω–∏–∂–µ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–î–æ–±–∞–≤–∏—Ç—å" (–¥–∞–ª–µ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è) –∏ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å @username, –±—É–¥–µ—Ç —Ç–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ —Å—Ç–æ–ª—å–∫–æ –∂–µ —Å–∫–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–î–∞–ª–µ–µ –ª–æ–≥–∏–∫–∞ –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∑–∞–±–∏—Ä–∞–Ω–∏—è —É –Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏ –∏ –∏—Ö –∞–π–¥–∏), –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å @username, –±—É–¥–µ—Ç —Ç–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ —Å—Ç–æ–ª—å–∫–æ –∂–µ —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤. (–î–∞–ª–µ–µ –ª–æ–≥–∏–∫–∞ –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–¥ –∫–∞–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∏ –∑–∞–±–∏—Ä–∞–Ω–∏—è —É –Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–Ω–∏–∫–∞)

3. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –æ–±–Ω—É–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∏ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è(–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏) –º–∞–∫—Å–∏–º—É–º 7 –¥–Ω–µ–π, –∞ –∑–∞—Ç–µ–º —Å–∞–º–∞—è –¥–∞–≤–Ω—è—è —Å–æ—Ö—Ä–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å—Å—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏, –æ–¥–∏–Ω –¥–µ–Ω—å –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞, —Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ 1 –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.

–í–æ—Ç –º–æ–π –∫–æ–¥. –ò—Å–ø—Ä–∞–≤—å , —É–¥–∞–ª–∏, –¥–æ–±–∞–≤—å –≤—Å–µ —Ç–∞–∫, –∫–∞–∫ —Å—á–∏—Ç–∞–µ—à—å –Ω—É–∂–Ω—ã–º, –≤ —Ç–∞–∫–æ–º –æ–±—ä–µ–º–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Ç–∞–∫ —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è , –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–¥—É–º–∞–Ω–∞. –ü—Ä–∏—à–ª–∏ –º–Ω–µ –ü–û–õ–ù–´–ô –∫–æ–¥ database.py –∞ —Ç–∞–∫–∂–µ main.py.

database.py
# database.py

import sqlite3
import datetime

def init_db():
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã numbers
    c.execute('''DROP TABLE IF EXISTS numbers''')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
    c.execute('''CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                status TEXT,
                last_request_time DATETIME)''')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã requests
    c.execute('''CREATE TABLE IF NOT EXISTS requests (
                request_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                status TEXT,
                request_time DATETIME,
                FOREIGN KEY(user_id) REFERENCES users(user_id))''')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã numbers
    c.execute('''CREATE TABLE IF NOT EXISTS numbers (
                number_id INTEGER PRIMARY KEY AUTOINCREMENT,
                number TEXT,
                service TEXT,
                user_id INTEGER,
                issued_to INTEGER,
                issued_time DATETIME,
                add_date DATE,
                add_time TIME,
                FOREIGN KEY(user_id) REFERENCES users(user_id))''')
    
    conn.commit()
    conn.close()

def execute_query(query, params=()):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute(query, params)
    conn.commit()
    conn.close()

def fetch_all(query, params=()):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute(query, params)
    rows = c.fetchall()
    conn.close()
    return rows

def fetch_one(query, params=()):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute(query, params)
    row = c.fetchone()
    conn.close()
    return row

config.py
API_TOKEN = '6864363740:AAHvRZxU3si18LiBDDL6iMc5OS1_F2DVe08'
ADMIN_ID = '1083294848'
DATABASE = 'bot_database.db'
GROUP_ID = '-1002237784770'

main.py
import telebot
from telebot import types
import datetime
import time
from threading import Thread
import random
import config
import database as db
import signal

bot = telebot.TeleBot(config.API_TOKEN, parse_mode='HTML')
db.init_db()

user_data = {}
admin_data = {}
recently_issued_numbers = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def init_user_data(user_id, username):
    user = db.fetch_one("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not user:
        db.execute_query("INSERT INTO users (user_id, username, status, last_request_time) VALUES (?, ?, ?, ?)",
                         (user_id, username, 'pending', None))

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    if str(user_id) == config.ADMIN_ID:
        show_main_menu(message)
        return

    init_user_data(user_id, username)
    user = db.fetch_one("SELECT status FROM users WHERE user_id = ?", (user_id,))
    if user[0] == 'approved':
        user_data[user_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        btn1 = types.KeyboardButton('üîÑ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
        markup.add(btn1)
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüîÑ –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=markup)
    else:
        show_pending_menu(message)

# –ú–µ–Ω—é –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
def show_pending_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ')
    btn2 = types.KeyboardButton('–ú–æ–∏ –∑–∞—è–≤–∫–∏')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ')
def request_access(message):
    user_id = message.from_user.id
    username = message.from_user.username
    now = datetime.datetime.now()

    user = db.fetch_one("SELECT last_request_time FROM users WHERE user_id = ?", (user_id,))
    
    if user and user[0]:
        try:
            last_request_time = datetime.datetime.strptime(user[0], '%Y-%m-%d %H:%M:%S.%f')
            if (now - last_request_time).total_seconds() < 10:
                bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏.")
                return
        except ValueError:
            last_request_time = datetime.datetime.strptime(user[0], '%Y-%m-%d %H:%M:%S')
            if (now - last_request_time).total_seconds() < 10:
                bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏.")
                return

    db.execute_query("INSERT INTO requests (user_id, username, status, request_time) VALUES (?, ?, ?, ?)",
                     (user_id, username, 'pending', now))
    db.execute_query("UPDATE users SET last_request_time = ? WHERE user_id = ?", (now, user_id))
    
    bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    bot.send_message(config.ADMIN_ID, f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç @{username}", reply_markup=admin_approval_markup(user_id))

# –ö–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_approval_markup(user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}")
    btn2 = types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{user_id}")
    markup.add(btn1, btn2)
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_'))
def approve_request(call):
    user_id = int(call.data.split('_')[1])
    db.execute_query("UPDATE users SET status = 'approved' WHERE user_id = ?", (user_id,))
    db.execute_query("UPDATE requests SET status = 'approved' WHERE user_id = ? AND status = 'pending'", (user_id,))
    bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
    bot.send_message(user_id, "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    show_main_menu_by_user_id(user_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_'))
def reject_request(call):
    user_id = int(call.data.split('_')[1])
    db.execute_query("UPDATE requests SET status = 'rejected' WHERE user_id = ? AND status = 'pending'", (user_id,))
    bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    bot.send_message(user_id, "–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞.")
    bot.answer_callback_query(call.id)

def show_main_menu_by_user_id(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
    btn2 = types.KeyboardButton('üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    btn3 = types.KeyboardButton('üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
    btn4 = types.KeyboardButton('‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(user_id, "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", reply_markup=markup)

# –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
    btn2 = types.KeyboardButton('üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    btn3 = types.KeyboardButton('üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
    btn4 = types.KeyboardButton('‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", reply_markup=markup)

# –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
@bot.message_handler(func=lambda message: message.text == 'üîÑ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
def start_work(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}
    user_data[user_id]['start_time'] = datetime.datetime.now()
    show_main_menu(message)

# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞
@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
def add_numbers(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("WhatsApp", callback_data="add_whatsapp")
    btn2 = types.InlineKeyboardButton("Telegram", callback_data="add_telegram")
    markup.add(btn1, btn2)
    back_button = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back')
    markup.add(back_button)
    bot.send_message(message.chat.id, "üì≤ –í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['add_whatsapp', 'add_telegram'])
def choose_service(call):
    service = call.data.split('_')[1]
    user_id = call.from_user.id
    msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è {service.capitalize()} –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9123456789, –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:")
    bot.register_next_step_handler(msg, process_numbers, service)
    show_back_button(call.message)

def process_numbers(message, service):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}
    numbers = message.text.split('\n')
    valid_numbers = []
    invalid_numbers = 0
    for number in numbers:
        if len(number) == 10 and number.isdigit():
            valid_numbers.append({'number': number, 'timestamp': datetime.datetime.now(), 'user_id': user_id})
        else:
            invalid_numbers += 1

    user_data[user_id][service].extend(valid_numbers)

    if service == 'whatsapp' and len(user_data[user_id][service]) > 25:
        user_data[user_id][service] = user_data[user_id][service][:25]

    queue_data = db.fetch_all("SELECT number FROM numbers WHERE service = ? AND issued_to IS NULL", (service,))
    queue_numbers = [entry[0] for entry in queue_data]
    for number in valid_numbers:
        if number['number'] not in queue_numbers:
            db.execute_query("INSERT INTO numbers (number, service, user_id, add_date, add_time) VALUES (?, ?, ?, ?, ?)",
                             (number['number'], service, user_id, number['timestamp'].date(), number['timestamp'].time().strftime('%H:%M:%S')))

    response = f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ {service.capitalize()} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
    response += f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(valid_numbers)}\n"
    response += f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å: {invalid_numbers}\n"
    response += f"üî¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(numbers)}\n"
    response += f"üìã –í–∞—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(user_data[user_id][service])}\n"
    bot.send_message(message.chat.id, response)
    show_back_button(message)


# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
@bot.message_handler(func=lambda message: message.text == 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
def show_statistics(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return

    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å:\n\n"
    response += f"üì± WhatsApp:\n–õ–∏–º–∏—Ç –≤ –æ—á–µ—Ä–µ–¥–∏: 25\n–î–æ–±–∞–≤–ª–µ–Ω–æ: {len(user_data[user_id]['whatsapp'])}\n"
    response += f"üì≤ Telegram:\n–õ–∏–º–∏—Ç –≤ –æ—á–µ—Ä–µ–¥–∏: –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π\n–î–æ–±–∞–≤–ª–µ–Ω–æ: {len(user_data[user_id]['telegram'])}\n"
    bot.send_message(message.chat.id, response)
    show_back_button(message)

# –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == 'üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
def show_added_numbers(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞.")
        return

    page = 0
    show_numbers_page(message, user_id, page)

def show_numbers_page(message, user_id, page):
    markup = types.InlineKeyboardMarkup()
    numbers = user_data[user_id]['whatsapp'] + user_data[user_id]['telegram']
    start_index = page * 4
    end_index = start_index + 4
    numbers_page = numbers[start_index:end_index]

    for entry in numbers_page:
        number = entry['number']
        timestamp = entry['timestamp']
        service = "üü¢" if number in [num['number'] for num in user_data[user_id]['whatsapp']] else "üîµ"
        btn_text = f"{service} {timestamp.strftime('%Y-%m-%d %H:%M')} - {number}"
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"delete_{number}_{timestamp.strftime('%Y%m%d%H%M')}"))

    if start_index > 0:
        markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'prev_page_{page-1}'))
    if end_index < len(numbers):
        markup.add(types.InlineKeyboardButton('‚û°Ô∏è –í–ø–µ—Ä–µ–¥', callback_data=f'next_page_{page+1}'))

    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back'))
    bot.send_message(message.chat.id, "–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_number(call):
    _, number, timestamp = call.data.split('_', 2)
    timestamp = datetime.datetime.strptime(timestamp, '%Y%m%d%H%M')
    user_id = call.from_user.id
    for service in ['whatsapp', 'telegram']:
        for entry in user_data[user_id][service]:
            if entry['number'] == number and entry['timestamp'] == timestamp:
                user_data[user_id][service].remove(entry)
                db.execute_query("DELETE FROM numbers WHERE number = ?", (number,))
                bot.send_message(user_id, f"–ù–æ–º–µ—Ä {number} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏!")
                bot.edit_message_text("–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞:", call.message.chat.id, call.message.message_id, reply_markup=None)
                show_numbers_page(call.message, user_id, 0)
                return

@bot.callback_query_handler(func=lambda call: call.data.startswith('prev_page_') or call.data.startswith('next_page_'))
def handle_pagination(call):
    user_id = call.from_user.id
    page = int(call.data.split('_')[-1])
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_numbers_page(call.message, user_id, page)

# –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É
@bot.message_handler(func=lambda message: message.text == '‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
def end_work(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}

    user_data[user_id]['start_time'] = None
    user_data[user_id]['whatsapp'] = []
    user_data[user_id]['telegram'] = []
    bot.send_message(message.chat.id, "‚èπÔ∏è –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ –≤–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤
@bot.message_handler(commands=['rm'])
def remove_numbers(message):
    numbers = message.text.split()[1:]
    for number in numbers:
        db.execute_query("DELETE FROM numbers WHERE number = ?", (number,))
        bot.send_message(message.chat.id, f"–ù–æ–º–µ—Ä {number} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è SMS
@bot.message_handler(func=lambda message: message.text.lower() in ['–≤–æ—Ç—Å', '—Ç–µ–ª–µ–≥–∞'])
def handle_purchase(message):
    service = 'whatsapp' if message.text.lower() == '–≤–æ—Ç—Å' else 'telegram'
    queue_data = db.fetch_all("SELECT * FROM numbers WHERE service = ? AND issued_to IS NULL", (service,))
    if queue_data:
        number_entry = random.choice(queue_data)
        number = number_entry[1]
        user_id = number_entry[3]
        db.execute_query("UPDATE numbers SET issued_to = ?, issued_time = ? WHERE number = ?",
                         (message.from_user.id, datetime.datetime.now(), number))
        if service not in recently_issued_numbers:
            recently_issued_numbers[service] = []
        recently_issued_numbers[service].append(number)
        if len(recently_issued_numbers[service]) > len(queue_data):
            recently_issued_numbers[service].pop(0)
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –°–ú–°', callback_data=f'request_sms_{number}'),
            types.InlineKeyboardButton('–ó–∞–º–µ–Ω–∞', callback_data=f'replace_number_{number}')
        )
        bot.send_message(message.chat.id, f"<b>–ù–æ–º–µ—Ä:</b> <a href='tel:{number}'>{number}</a>", reply_markup=markup)
        bot.send_message(user_id, f"–ù–æ–º–µ—Ä {number} –±—ã–ª –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.username}.")
    else:
        bot.send_message(message.chat.id, f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è {service.capitalize()}.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('request_sms_'))
def request_sms(call):
    number = call.data.split('_')[2]
    bot.send_message(call.message.chat.id, f"–û–∂–∏–¥–∞–Ω–∏–µ –°–ú–°. –ù–æ–º–µ—Ä: <a href='tel:{number}'>{number}</a>")
    worker_id = db.fetch_one("SELECT user_id FROM numbers WHERE number = ?", (number,))
    if worker_id:
        worker_id = worker_id[0]
        request_msg = bot.send_message(worker_id, f"–ó–∞–ø—Ä–æ—à–µ–Ω –°–ú–° –ø–æ –Ω–æ–º–µ—Ä—É {number}. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–º—Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=worker_sms_markup(number))
        if worker_id not in user_data:
            user_data[worker_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}
        user_data[worker_id]['sms_requests'][number] = request_msg.message_id
        bot.register_next_step_handler(request_msg, receive_sms, number)
    bot.answer_callback_query(call.id)

def worker_sms_markup(number):
    markup = types.InlineKeyboardMarkup(row_width=1)
    cancel_button = types.InlineKeyboardButton('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data=f'cancel_sms_{number}')
    markup.add(cancel_button)
    return markup

def receive_sms(message, number):
    user_id = message.from_user.id
    if user_id in user_data and 'sms_requests' in user_data[user_id] and number in user_data[user_id]['sms_requests']:
        issued_to = db.fetch_one("SELECT issued_to FROM numbers WHERE number = ?", (number,))
        if issued_to:
            issued_to = issued_to[0]
            response = f"–ù–æ–º–µ—Ä: <a href='tel:{number}'>{number}</a>\n<b>SMS:</b> {message.text}"
            bot.send_message(config.GROUP_ID, response)
            delete_number_from_db(number)
            del user_data[user_id]['sms_requests'][number]
        else:
            bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –°–ú–° –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –°–ú–° –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('replace_number_'))
def replace_number(call):
    number = call.data.split('_')[2]
    service_data = db.fetch_one("SELECT service FROM numbers WHERE number = ?", (number,))
    if service_data:
        service = service_data[0]
        queue_data = db.fetch_all("SELECT number FROM numbers WHERE service = ? AND issued_to IS NULL", (service,))
        queue_numbers = [entry[0] for entry in queue_data if entry[0] not in recently_issued_numbers.get(service, [])]
        if not queue_numbers:
            queue_numbers = [entry[0] for entry in queue_data]
            recently_issued_numbers[service] = []
        if queue_numbers:
            new_number = random.choice(queue_numbers)
            recently_issued_numbers[service].append(new_number)
            if len(recently_issued_numbers[service]) > len(queue_data):
                recently_issued_numbers[service].pop(0)
            db.execute_query("UPDATE numbers SET issued_to = ?, issued_time = ? WHERE number = ?",
                             (call.from_user.id, datetime.datetime.now(), new_number))
            db.execute_query("UPDATE numbers SET issued_to = NULL, issued_time = NULL WHERE number = ?", (number,))
            markup = types.InlineKeyboardMarkup(row_width=1)
            sms_button = types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –°–ú–°', callback_data=f'request_sms_{new_number}')
            replace_button = types.InlineKeyboardButton('–ó–∞–º–µ–Ω–∞', callback_data=f'replace_number_{new_number}')
            markup.add(sms_button, replace_button)
            bot.edit_message_text(f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: <a href='tel:{new_number}'>{new_number}</a>", call.message.chat.id, call.message.message_id, reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã.")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_sms_'))
def cancel_sms(call):
    number = call.data.split('_')[2]
    worker_id = db.fetch_one("SELECT user_id FROM numbers WHERE number = ?", (number,))[0]
    if worker_id and worker_id in user_data and 'sms_requests' in user_data[worker_id] and number in user_data[worker_id]['sms_requests']:
        request_msg_id = user_data[worker_id]['sms_requests'][number]
        bot.delete_message(worker_id, request_msg_id)
        del user_data[worker_id]['sms_requests'][number]
        bot.send_message(worker_id, f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –Ω–æ–º–µ—Ä–∞ {number}")
        bot.send_message(config.GROUP_ID, f"–û—Ç–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É {number}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        db.execute_query("UPDATE numbers SET issued_to = NULL, issued_time = NULL WHERE number = ?", (number,))
    bot.answer_callback_query(call.id)

def delete_number_from_db(number):
    db.execute_query("DELETE FROM numbers WHERE number = ?", (number,))
    bot.send_message(config.ADMIN_ID, f"–ù–æ–º–µ—Ä {number} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –≤ 02:00 –ø–æ –ú–°–ö
def auto_clear():
    while True:
        now = datetime.datetime.now()
        if now.hour == 2 and now.minute == 0:
            db.execute_query("DELETE FROM numbers")
            for user_id in user_data:
                user_data[user_id]['whatsapp'] = []
                user_data[user_id]['telegram'] = []
            bot.send_message(config.ADMIN_ID, f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
Thread(target=auto_clear).start()

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_back_button(message):
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back')
    markup.add(back_button)
    bot.send_message(message.chat.id, "üîô –ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data == 'go_back')
def handle_back(call):
    show_main_menu(call.message)
    bot.answer_callback_query(call.id)

# –ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø
@bot.message_handler(func=lambda message: message.text == '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø')
def request_access(message):
    user_id = message.from_user.id
    bot.send_message(config.ADMIN_ID, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username} (ID: {user_id}).", reply_markup=admin_approval_markup(user_id))
    bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ –∑–∞—è–≤–∫–∏')
def view_requests(message):
    user_id = message.from_user.id
    if str(user_id) == config.ADMIN_ID:
        pending_requests = db.fetch_all("SELECT * FROM requests WHERE status = 'pending'")
        if pending_requests:
            response = "–ó–∞—è–≤–∫–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n\n"
            markup = types.InlineKeyboardMarkup(row_width=1)
            for req in pending_requests:
                response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{req['username']} (ID: {req['user_id']})\n"
                markup.add(types.InlineKeyboardButton(f"–ó–∞—è–≤–∫–∞ –æ—Ç @{req['username']}", callback_data=f"show_request_{req['user_id']}"))
            bot.send_message(message.chat.id, response, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_request_'))
def show_request(call):
    user_id = int(call.data.split('_')[2])
    request = db.fetch_one("SELECT * FROM requests WHERE user_id = ? AND status = 'pending'", (user_id,))
    if request:
        response = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{request['username']} (ID: {request['user_id']})\n"
        response += "–û–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –û—Ç–∫–∞–∑–∞—Ç—å?"
        bot.send_message(call.message.chat.id, response, reply_markup=admin_approval_markup(user_id))
    else:
        bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
    bot.answer_callback_query(call.id)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@bot.message_handler(commands=['admin_stats'])
def admin_stats(message):
    user_id = message.from_user.id
    if str(user_id) == config.ADMIN_ID:
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user in user_data:
            response += f"/uid{user} [@{bot.get_chat(user).username}]: WhatsApp {len(user_data[user]['whatsapp'])}/0/0/0/0 Telegram: {len(user_data[user]['telegram'])}/0\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@bot.message_handler(commands=['removeworker'])
def remove_worker(message):
    if str(message.from_user.id) != config.ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        user_id = int(message.text.split()[1])
        db.execute_query("DELETE FROM users WHERE user_id = ?", (user_id,))
        db.execute_query("DELETE FROM requests WHERE user_id = ?", (user_id,))
        db.execute_query("DELETE FROM numbers WHERE user_id = ?", (user_id,))
        db.execute_query("DELETE FROM numbers WHERE issued_to = ?", (user_id,))
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.")
        bot.send_message(user_id, "–í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.")
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /removeworker.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def signal_handler(signal, frame):
    print('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...')
    bot.stop_polling()
    exit(0)

signal.signal(signal.SIGINT, signal_handler)

if __name__ == '__main__':
    try:
        bot.polling(none_stop=True, timeout=30)
    except KeyboardInterrupt:
        signal_handler(signal.SIGINT, None)
