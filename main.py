import telebot
from telebot import types
import datetime
import time
from threading import Thread, Timer
import random
import config
import signal
import requests
from requests.exceptions import ReadTimeout, ConnectionError
import random
import database as db 

bot = telebot.TeleBot(config.API_TOKEN, parse_mode='HTML')

user_data = {}
admin_data = {}
recently_issued_numbers = {}
sms_requests = {}
request_tracker = {}  

@bot.message_handler(func=lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É')
def change_price(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('WhatsApp', callback_data='change_price_whatsapp')
    btn2 = types.InlineKeyboardButton('Telegram', callback_data='change_price_telegram')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('change_price_'))
def select_service_to_change_price(call):
    service = call.data.split('_')[-1]
    current_price = db.get_price(service)
    msg = bot.send_message(call.message.chat.id, f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {current_price}$ –∑–∞ {service.capitalize()}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
    bot.register_next_step_handler(msg, process_new_price, service)

def process_new_price(message, service):
    try:
        new_price = float(message.text)
        db.update_price(service, new_price)
        bot.send_message(message.chat.id, f"–¶–µ–Ω–∞ –∑–∞ {service.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_price}$")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        change_price(message)

def retry_request(func, *args, retries=3, delay=2, **kwargs):
    for attempt in range(retries):
        try:
            return func(*args, **kwargs)
        except (ReadTimeout, ConnectionError):
            if attempt < retries - 1:
                time.sleep(delay)
            else:
                raise

def init_user_data(user_id, username):
    user = db.fetch_one("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not user:
        db.execute_query("INSERT INTO users (user_id, username, status, last_request_time, roles) VALUES (?, ?, ?, ?, ?)",
                         (user_id, username, 'pending', None, ''))
    else:
        roles = user[4].split(',')
        if str(user_id) == config.ADMIN_ID and 'admin' not in roles:
            add_role(user_id, 'admin')

def add_role(user_id, role):
    user = db.fetch_one("SELECT roles FROM users WHERE user_id = ?", (user_id,))
    if user:
        roles = user[0]
        if role not in roles.split(','):
            roles = roles + f",{role}" if roles else role
            db.execute_query("UPDATE users SET roles = ? WHERE user_id = ?", (roles, user_id))

def remove_role(user_id, role):
    user = db.fetch_one("SELECT roles FROM users WHERE user_id = ?", (user_id,))
    if user:
        roles = user[0].split(',')
        if role in roles:
            roles.remove(role)
            db.execute_query("UPDATE users SET roles = ? WHERE user_id = ?", (','.join(roles), user_id))
            if role == 'worker':
                show_pending_menu_by_user_id(user_id)

def show_pending_menu_by_user_id(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ')
    btn2 = types.KeyboardButton('–ú–æ–∏ –∑–∞—è–≤–∫–∏')
    markup.add(btn1, btn2)
    bot.send_message(user_id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.", reply_markup=markup)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username

    if str(user_id) == config.ADMIN_ID:
        add_role(user_id, 'admin')
        show_admin_main_menu(message)
        return

    init_user_data(user_id, username)
    user = db.fetch_one("SELECT status, roles FROM users WHERE user_id = ?", (user_id,))
    if user[0] == 'approved' or 'admin' in user[1].split(',') or 'worker' in user[1].split(','):
        user_data[user_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        btn1 = types.KeyboardButton('üîÑ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
        markup.add(btn1)
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüîÑ –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=markup)
    else:
        show_pending_menu(message)

def show_pending_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ')
    btn2 = types.KeyboardButton('–ú–æ–∏ –∑–∞—è–≤–∫–∏')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ')
def request_access(message):
    user_id = message.from_user.id
    username = message.from_user.username
    now = datetime.datetime.now()

    user = db.fetch_one("SELECT last_request_time FROM users WHERE user_id = ?", (user_id,))
    
    if user and user[0]:
        try:
            last_request_time = datetime.datetime.strptime(user[0], '%Y-%m-%d %H:%M:%S.%f')
        except ValueError:
            last_request_time = datetime.datetime.strptime(user[0], '%Y-%m-%d %H:%–ú:%S')

        if (now - last_request_time).total_seconds() < 10:
            bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏.")
            return

    db.execute_query("INSERT INTO requests (user_id, username, status, request_time) VALUES (?, ?, ?, ?)",
                     (user_id, username, 'pending', now))
    db.execute_query("UPDATE users SET last_request_time = ? WHERE user_id = ?", (now, user_id))
    
    bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    bot.send_message(config.ADMIN_ID, f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç @{username}", reply_markup=admin_approval_markup(user_id))

def admin_approval_markup(user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}")
    btn2 = types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{user_id}")
    markup.add(btn1, btn2)
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_'))
def approve_request(call):
    user_id = int(call.data.split('_')[1])
    db.execute_query("UPDATE users SET status = 'approved' WHERE user_id = ?", (user_id,))
    db.execute_query("UPDATE requests SET status = 'approved' WHERE user_id = ? AND status = 'pending'", (user_id,))
    bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
    bot.send_message(user_id, "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    show_main_menu_by_user_id(user_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_'))
def reject_request(call):
    user_id = int(call.data.split('_')[1])
    db.execute_query("UPDATE requests SET status = 'rejected' WHERE user_id = ? AND status = 'pending'", (user_id,))
    bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    bot.send_message(user_id, "–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞.")
    bot.answer_callback_query(call.id)

def show_main_menu_by_user_id(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
    btn2 = types.KeyboardButton('üìä –ü—Ä–æ—Ñ–∏–ª—å')
    btn3 = types.KeyboardButton('üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
    btn4 = types.KeyboardButton('‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(user_id, "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", reply_markup=markup)

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
    btn2 = types.KeyboardButton('üìä –ü—Ä–æ—Ñ–∏–ª—å')
    btn3 = types.KeyboardButton('üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
    btn4 = types.KeyboardButton('‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", reply_markup=markup)

def show_admin_main_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
    btn2 = types.KeyboardButton('üìä –ü—Ä–æ—Ñ–∏–ª—å')
    btn3 = types.KeyboardButton('üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
    btn4 = types.KeyboardButton('‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    btn5 = types.KeyboardButton('üîß –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.chat.id, "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", reply_markup=markup)

def show_admin_main_menu_by_user_id(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
    btn2 = types.KeyboardButton('üìä –ü—Ä–æ—Ñ–∏–ª—å')
    btn3 = types.KeyboardButton('üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
    btn4 = types.KeyboardButton('‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    btn5 = types.KeyboardButton('üîß –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(user_id, "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üîß –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
def admin_panel(message):
    user_id = message.from_user.id
    if db.can_access_admin_panel(user_id):
        show_admin_panel(message)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

@bot.message_handler(func=lambda message: message.text == 'üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
def handle_exit_admin_panel(message):
    user_id = message.from_user.id
    user_roles = db.fetch_one("SELECT roles FROM users WHERE user_id = ?", (user_id,))
    if user_roles and 'admin' in user_roles[0].split(','):
        show_admin_main_menu(message)
    else:
        show_main_menu(message)


def show_admin_panel(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    btn2 = types.KeyboardButton('üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')
    btn3 = types.KeyboardButton('üë• –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤')
    btn4 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É')
    btn5 = types.KeyboardButton('üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.chat.id, "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def show_stats(message):
    stats = db.get_stats()
    response = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {stats[0]}:\n\n"
    response += f"WhatsApp - –£–¥–∞—á–Ω—ã—Ö: {stats[1]}, –í—Å–µ–≥–æ: {stats[2]}\n"
    response += f"Telegram - –£–¥–∞—á–Ω—ã—Ö: {stats[3]}, –í—Å–µ–≥–æ: {stats[4]}\n"
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == 'üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')
def list_admins(message):
    if not db.can_access_admin_list(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    admins = db.fetch_all("SELECT user_id, username FROM users WHERE roles LIKE '%admin%'")
    response = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    markup = types.InlineKeyboardMarkup()
    for admin in admins:
        response += f"@{admin[1]} (ID: {admin[0]})\n"
        if str(admin[0]) != config.ADMIN_ID:  
            markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å @{admin[1]}", callback_data=f"remove_admin_{admin[0]}"))
    markup.add(types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data='add_admin'))
    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üë• –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤')
def list_workers(message):
    if not db.can_access_worker_list(message.from_user.id) and not db.is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    workers = db.fetch_all("SELECT user_id, username FROM users WHERE roles LIKE '%worker%'")
    response = "–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:\n\n"
    markup = types.InlineKeyboardMarkup()
    for worker in workers:
        response += f"@{worker[1]} (ID: {worker[0]})\n"
        markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å @{worker[1]}", callback_data=f"remove_worker_{worker[0]}"))
    markup.add(types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data='add_worker'))
    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'add_worker')
def add_worker(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏:")
    bot.register_next_step_handler(msg, process_add_worker)

def process_add_worker(message):
    try:
        user_id = int(message.text)
        add_role(user_id, 'worker')
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏.")
        show_main_menu_by_user_id(user_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_worker_'))
def remove_worker(call):
    user_id = int(call.data.split('_')[2])
    remove_role(user_id, 'worker')
    bot.send_message(call.message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.")
    list_workers(call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'add_admin')
def add_admin(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:")
    bot.register_next_step_handler(msg, process_add_admin)

def process_add_admin(message):
    try:
        user_id = int(message.text)
        add_role(user_id, 'admin')
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        show_admin_main_menu_by_user_id(user_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_admin_'))
def remove_admin(call):
    user_id = int(call.data.split('_')[2])
    remove_role(user_id, 'admin')
    bot.send_message(call.message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    list_admins(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_worker_'))
def remove_worker(call):
    user_id = int(call.data.split('_')[2])
    remove_role(user_id, 'worker')
    bot.send_message(call.message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.")
    list_workers(call.message)

@bot.message_handler(func=lambda message: message.text == 'üîÑ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
def start_work(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}
    user_data[user_id]['start_time'] = datetime.datetime.now()

    user_roles = db.fetch_one("SELECT roles FROM users WHERE user_id = ?", (user_id,))
    if user_roles and 'admin' in user_roles[0].split(','):
        show_admin_main_menu(message)
    else:
        show_main_menu(message)

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
def add_numbers(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("WhatsApp", callback_data="add_whatsapp")
    btn2 = types.InlineKeyboardButton("Telegram", callback_data="add_telegram")
    markup.add(btn1, btn2)
    back_button = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back')
    markup.add(back_button)
    
    try:
        retry_request(bot.send_message, message.chat.id, "üì≤ –í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä:", reply_markup=markup)
    except (ReadTimeout, ConnectionError):
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data in ['add_whatsapp', 'add_telegram'])
def choose_service(call):
    service = call.data.split('_')[1]
    msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è {service.capitalize()} –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9123456789, –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:")
    bot.register_next_step_handler(msg, process_numbers, service)
    show_back_button(call.message)
    
def process_numbers(message, service):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}
    
    numbers = message.text.split('\n')
    valid_numbers = []
    invalid_numbers = 0
    
    current_numbers_count = len(user_data[user_id][service])
    max_numbers_limit = 25 if service == 'whatsapp' else 50

    for number in numbers:
        if len(number) == 10 and number.isdigit():
            if current_numbers_count < max_numbers_limit:
                valid_numbers.append({'number': number, 'timestamp': datetime.datetime.now(), 'user_id': user_id})
                current_numbers_count += 1
            else:
                break
        else:
            invalid_numbers += 1

    user_data[user_id][service].extend(valid_numbers)

    for number in valid_numbers:
        db.execute_query("INSERT INTO numbers (number, service, user_id, add_date, add_time) VALUES (?, ?, ?, ?, ?)",
                         (number['number'], service, user_id, number['timestamp'].date(), number['timestamp'].time().strftime('%H:%M:%S')))
    
    response = f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ {service.capitalize()} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
    response += f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(valid_numbers)}\n"
    response += f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å: {invalid_numbers}\n"
    response += f"üî¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(numbers)}\n"
    response += f"üìã –í–∞—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(user_data[user_id][service])}\n"
    bot.send_message(message.chat.id, response)
    show_back_button(message)

@bot.message_handler(func=lambda message: message.text == 'üìä –ü—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return

    stats = db.get_stats()
    whatsapp_success, whatsapp_total = stats[1], stats[2]
    telegram_success, telegram_total = stats[3], stats[4]

    whatsapp_price = db.get_price('whatsapp')
    telegram_price = db.get_price('telegram')

    whatsapp_earnings = whatsapp_success * whatsapp_price
    telegram_earnings = telegram_success * telegram_price

    response = f"üß∏ –í—ã {message.from_user.username}\n"
    response += f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.date.today().strftime('%d-%m-%Y')}\n"
    response += f"üü¢ WhatsApp:\n"
    response += f"–£–¥–∞—á–Ω—ã—Ö: {whatsapp_success}\n"
    response += f"–°–ª–µ—Ç–µ–≤—à–∏—Ö: {whatsapp_total - whatsapp_success}\n"
    response += f"–í—Å–µ–≥–æ: {whatsapp_total}\n"
    response += f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {whatsapp_earnings}$\n\n"
    response += f"üîµ Telegram:\n"
    response += f"–£–¥–∞—á–Ω—ã—Ö: {telegram_success}\n"
    response += f"–°–ª–µ—Ç–µ–≤—à–∏—Ö: {telegram_total - telegram_success}\n"
    response += f"–í—Å–µ–≥–æ: {telegram_total}\n"
    response += f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {telegram_earnings}$\n"
    
    try:
        retry_request(bot.send_message, message.chat.id, response)
    except (ReadTimeout, ConnectionError):
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == 'üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
def show_added_numbers(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞.")
        return

    page = 0
    show_numbers_page(message, user_id, page)

def show_numbers_page(message, user_id, page):
    markup = types.InlineKeyboardMarkup()
    numbers = db.fetch_all("SELECT number_id, number, add_date, add_time, service FROM numbers WHERE user_id = ?", (user_id,))
    start_index = page * 4
    end_index = start_index + 4
    numbers_page = numbers[start_index:end_index]

    for entry in numbers_page:
        number_id = entry[0]
        number = entry[1]
        timestamp = f"{entry[2]} {entry[3]}"
        service = entry[4]  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ service –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç service
        service_emoji = "üü¢" if service == "whatsapp" else "üîµ" 

        btn_text = f"{service_emoji} {timestamp} - {number}"
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"confirm_delete_{number_id}"))

    if start_index > 0:
        markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'prev_page_{page-1}'))
    if end_index < len(numbers):    
        markup.add(types.InlineKeyboardButton('‚û°Ô∏è –í–ø–µ—Ä–µ–¥', callback_data=f'next_page_{page+1}'))

    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back'))
    bot.send_message(message.chat.id, "–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_'))
def confirm_delete_number(call):
    number_id = call.data.split('_')[2]
    markup = types.InlineKeyboardMarkup()
    btn_yes = types.InlineKeyboardButton('–î–∞', callback_data=f'delete_number_{number_id}')
    btn_no = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='cancel_delete')
    markup.add(btn_yes, btn_no)
    bot.send_message(call.message.chat.id, f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å ID {number_id} –∏–∑ –æ—á–µ—Ä–µ–¥–∏?", reply_markup=markup)
    bot.answer_callback_query(call.id)

def print_numbers_table():
    rows = db.fetch_all("SELECT * FROM numbers")
    for row in rows:
        print(row)

def delete_number_entry(number, add_date, add_time):
    print(f"Deleting number {number} with add_date {add_date} and add_time {add_time}")
    db.execute_query("DELETE FROM numbers WHERE number = ? AND add_date = ? AND add_time = ?", (number, add_date, add_time))
    # Verify if the number is deleted
    result = db.fetch_one("SELECT * FROM numbers WHERE number = ? AND add_date = ? AND add_time = ?", (number, add_date, add_time))
    if result:
        print(f"Number {number} still exists in the database: {result}")
    else:
        print(f"Number {number} successfully deleted from the database.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_number_'))
def delete_number(call):
    try:
        number_id = call.data.split('_')[2]
        user_id = call.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        number_data = db.fetch_one("SELECT user_id FROM numbers WHERE number_id = ?", (number_id,))
        if number_data:
            print(f"Number data found: {number_data}")  # Debugging information
            if number_data[0] == user_id:
                # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                db.execute_query("DELETE FROM numbers WHERE number_id = ?", (number_id,))
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
                remaining_number = db.fetch_one("SELECT * FROM numbers WHERE number_id = ?", (number_id,))
                if remaining_number:
                    print(f"Number with ID {number_id} was not deleted from database. Remaining number: {remaining_number}")
                else:
                    print(f"Number with ID {number_id} successfully deleted from database")
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.send_message(user_id, f"–ù–æ–º–µ—Ä —Å ID {number_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏!")
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–æ–º–µ—Ä–æ–≤
                message_id = call.message.message_id
                markup = call.message.reply_markup
                new_markup = types.InlineKeyboardMarkup()
                
                for row in markup.inline_keyboard:
                    new_row = []
                    for button in row:
                        if f'confirm_delete_{number_id}' not in button.callback_data:
                            new_row.append(button)
                    if new_row:
                        new_markup.add(*new_row)
                
                bot.edit_message_reply_markup(call.message.chat.id, message_id, reply_markup=new_markup)
            else:
                print(f"User {user_id} does not own number {number_id}")  # Debugging information
                bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.")
        else:
            print(f"No number data found for number ID {number_id}")  # Debugging information
            bot.send_message(user_id, "–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"Error in delete_number: {e}")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_delete')
def cancel_delete(call):
    bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    show_numbers_page(call.message, call.from_user.id, 0)


@bot.callback_query_handler(func=lambda call: call.data.startswith('prev_page_') or call.data.startswith('next_page_'))
def handle_pagination(call):
    user_id = call.from_user.id
    page = int(call.data.split('_')[-1])
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_numbers_page(call.message, user_id, page)

@bot.message_handler(func=lambda message: message.text == '‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
def end_work(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}

    user_data[user_id]['start_time'] = None
    user_data[user_id]['whatsapp'] = []
    user_data[user_id]['telegram'] = []

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.execute_query("DELETE FROM numbers WHERE user_id = ?", (user_id,))
    
    bot.send_message(message.chat.id, "‚èπÔ∏è –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ –≤–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–æ–º–µ—Ä–æ–≤
    remove_all_number_buttons(message)

def remove_all_number_buttons(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back'))
    bot.edit_message_reply_markup(message.chat.id, message.message_id, reply_markup=markup)

@bot.message_handler(commands=['rm'])
def remove_numbers(message):
    numbers = message.text.split()[1:]
    for number in numbers:
        db.execute_query("DELETE FROM numbers WHERE number = ?", (number,))
        bot.send_message(message.chat.id, f"–ù–æ–º–µ—Ä {number} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

@bot.message_handler(func=lambda message: message.text.lower() in ['–≤–æ—Ç—Å', '—Ç–µ–ª–µ–≥–∞'])
def handle_purchase(message):
    service = 'whatsapp' if message.text.lower() == '–≤–æ—Ç—Å' else 'telegram'
    queue_data = db.fetch_all("SELECT * FROM numbers WHERE service = ? AND issued_to IS NULL", (service,))
    if queue_data:
        number_entry = random.choice(queue_data)
        number = number_entry[1]
        user_id = number_entry[3]
        db.execute_query("UPDATE numbers SET issued_to = ?, issued_time = ? WHERE number = ?",
                         (message.from_user.id, datetime.datetime.now(), number))
        if service not in recently_issued_numbers:
            recently_issued_numbers[service] = []
        recently_issued_numbers[service].append(number)
        if len(recently_issued_numbers[service]) > len(queue_data):
            recently_issued_numbers[service].pop(0)
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –°–ú–°', callback_data=f'request_sms_{number}'),
            types.InlineKeyboardButton('–ó–∞–º–µ–Ω–∞', callback_data=f'replace_number_{number}'),
        )
        bot.send_message(message.chat.id, f"<b>–ù–æ–º–µ—Ä:</b> <a href='tel:{number}'>{number}</a>", reply_markup=markup)
        bot.send_message(user_id, f"–ù–æ–º–µ—Ä {number} –±—ã–ª –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.username}.")
        db.increment_counter()
        db.update_stats(service, success=False)
        
        Timer(120, return_number_to_queue, args=(number, message.chat.id)).start()
    else:
        bot.send_message(message.chat.id, f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è {service.capitalize()}.")

def return_number_to_queue(number, chat_id):
    success = db.fetch_one("SELECT success FROM numbers WHERE number = ?", (number,))
    if success and success[0] == 0:
        db.execute_query("UPDATE numbers SET issued_to = NULL, issued_time = NULL WHERE number = ? AND success = 0", (number,))
        bot.send_message(chat_id, f"–í—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –°–ú–° –∏—Å—Ç–µ–∫–ª–æ. –ù–æ–º–µ—Ä {number} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")

def replace_number_after_timeout(message, number, worker_id):
    issued_to = db.fetch_one("SELECT issued_to FROM numbers WHERE number = ? AND success = 0", (number,))
    if issued_to:
        issued_to = issued_to[0]
        db.execute_query("UPDATE numbers SET issued_to = NULL, issued_time = NULL WHERE number = ? AND success = 0", (number,))
        bot.send_message(worker_id, f"–í—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} –∏—Å—Ç–µ–∫–ª–æ. –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
        
        service_data = db.fetch_one("SELECT service FROM numbers WHERE number = ?", (number,))
        if service_data:
            service = service_data[0]
            queue_data = db.fetch_all("SELECT number FROM numbers WHERE service = ? AND issued_to IS NULL", (service,))
            if queue_data:
                new_number = random.choice(queue_data)[0]
                db.execute_query("UPDATE numbers SET issued_to = ?, issued_time = ? WHERE number = ?",
                                 (issued_to, datetime.datetime.now(), new_number))
                markup = types.InlineKeyboardMarkup(row_width=1)
                markup.add(
                    types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –°–ú–°', callback_data=f'request_sms_{new_number}'),
                    types.InlineKeyboardButton('–ó–∞–º–µ–Ω–∞', callback_data=f'replace_number_{new_number}'),
                )
                bot.send_message(issued_to, f"–í–∞—à –Ω–æ–º–µ—Ä –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω. –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: <a href='tel:{new_number}'>{new_number}</a>", reply_markup=markup)
                bot.send_message(worker_id, f"–ù–æ–º–µ—Ä {new_number} –±—ã–ª –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {issued_to}.")
                db.increment_counter()
                db.update_stats(service, success=False)
            else:
                bot.send_message(issued_to, f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è {service.capitalize()} –¥–ª—è –∑–∞–º–µ–Ω—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('request_sms_'))
def request_sms(call):
    number = call.data.split('_')[2]
    user_id = call.from_user.id
    
    if user_id not in request_tracker:
        request_tracker[user_id] = []
    
    if number in request_tracker[user_id]:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –°–ú–° –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞.", show_alert=True)
        return
    
    request_tracker[user_id].append(number)

    worker_id = db.fetch_one("SELECT user_id FROM numbers WHERE number = ?", (number,))
    
    if worker_id:
        worker_id = worker_id[0]
        request_msg = bot.send_message(worker_id, f"–ó–∞–ø—Ä–æ—à–µ–Ω –°–ú–° –ø–æ –Ω–æ–º–µ—Ä—É {number}. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–º—Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=worker_sms_markup(number))
        
        if worker_id not in user_data:
            user_data[worker_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}
        
        if number not in user_data[worker_id]['sms_requests']:
            user_data[worker_id]['sms_requests'][number] = []
        
        user_data[worker_id]['sms_requests'][number].append(request_msg.message_id)
        
        bot.register_next_step_handler(request_msg, lambda message: receive_sms(message, number))
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        timer = Timer(120, return_number_to_queue, args=(number, call.message.chat.id))
        timer.start()
        
        bot.send_message(call.message.chat.id, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –°–ú–° –ø–æ –Ω–æ–º–µ—Ä—É <a href='tel:{number}'>{number}</a> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –°–ú–° (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ)', callback_data=f'request_sms_{number}', disable_web_page_preview=True))
        markup.add(types.InlineKeyboardButton('–ó–∞–º–µ–Ω–∞', callback_data=f'replace_number_{number}'))
        
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.answer_callback_query(call.id)

def worker_sms_markup(number):
    markup = types.InlineKeyboardMarkup(row_width=1)
    cancel_button = types.InlineKeyboardButton('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data=f'cancel_sms_{number}')
    markup.add(cancel_button)
    return markup

def receive_sms(message, number):
    user_id = message.from_user.id
    if user_id in user_data and 'sms_requests' in user_data[user_id] and number in user_data[user_id]['sms_requests']:
        matched_request = False
        for request_msg_id in user_data[user_id]['sms_requests'][number]:
            if message.reply_to_message and message.reply_to_message.message_id == request_msg_id:
                issued_to = db.fetch_one("SELECT issued_to FROM numbers WHERE number = ?", (number,))
                if issued_to:
                    issued_to = issued_to[0]
                    response = f"–ù–æ–º–µ—Ä: <a href='tel:{number}'>{number}</a>\n<b>SMS:</b> {message.text}\n+{db.get_counter()}"
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    decrement_button = types.InlineKeyboardButton('‚ùå–°–ª—ë—Ç', callback_data=f'decrement_counter_{number}')
                    markup.add(decrement_button)
                    sent_msg = bot.send_message(config.GROUP_ID, response, reply_markup=markup)
                    Timer(600, deactivate_decrement_button, args=(config.GROUP_ID, sent_msg.message_id, number)).start()
                    user_data[user_id]['sms_requests'][number].remove(request_msg_id)
                    if not user_data[user_id]['sms_requests'][number]:
                        del user_data[user_id]['sms_requests'][number]
                    matched_request = True
                    break
        if not matched_request:
            bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –°–ú–° –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –°–ú–° –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('replace_number_'))
def replace_number(call):
    number = call.data.split('_')[2]
    service_data = db.fetch_one("SELECT service FROM numbers WHERE number = ?", (number,))
    if service_data:
        service = service_data[0]
        queue_data = db.fetch_all("SELECT number FROM numbers WHERE service = ? AND issued_to IS NULL", (service,))
        queue_numbers = [entry[0] for entry in queue_data if entry[0] not in recently_issued_numbers.get(service, [])]
        
        if not queue_numbers:
            queue_numbers = [entry[0] for entry in queue_data]
            recently_issued_numbers[service] = []
        
        if queue_numbers:
            new_number = random.choice(queue_numbers)
            recently_issued_numbers[service].append(new_number)
            
            if len(recently_issued_numbers[service]) > len(queue_data):
                recently_issued_numbers[service].pop(0)
                
            db.execute_query("UPDATE numbers SET issued_to = ?, issued_time = ? WHERE number = ?", 
                             (call.from_user.id, datetime.datetime.now(), new_number))
            db.execute_query("UPDATE numbers SET issued_to = NULL, issued_time = NULL WHERE number = ?", (number,))
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            sms_button = types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –°–ú–°', callback_data=f'request_sms_{new_number}')
            replace_button = types.InlineKeyboardButton('–ó–∞–º–µ–Ω–∞', callback_data=f'replace_number_{new_number}')
            markup.add(sms_button, replace_button)
            
            bot.edit_message_text(f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: <a href='tel:{new_number}'>{new_number}</a>", 
                                  call.message.chat.id, call.message.message_id, reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã.")
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_sms_'))
def cancel_sms(call):
    number = call.data.split('_')[2]
    worker_id = db.fetch_one("SELECT user_id FROM numbers WHERE number = ?", (number,))[0]
    if worker_id and worker_id in user_data and 'sms_requests' in user_data[worker_id] and number in user_data[worker_id]['sms_requests']:
        for request_msg_id in user_data[worker_id]['sms_requests'][number]:
            bot.delete_message(worker_id, request_msg_id)
        del user_data[worker_id]['sms_requests'][number]
        bot.send_message(worker_id, f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –Ω–æ–º–µ—Ä–∞ {number}")
        bot.send_message(config.GROUP_ID, f"–û—Ç–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É {number}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        db.execute_query("UPDATE numbers SET issued_to = NULL, issued_time = NULL WHERE number = ?", (number,))
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('decrement_counter_'))
def decrement_counter_handler(call):
    number = call.data.split('_')[2]
    db.decrement_counter()
    db.execute_query("DELETE FROM numbers WHERE number = ?", (number,))
    bot.send_message(call.message.chat.id, f"–ù–æ–º–µ—Ä {number} —Å–ª–µ—Ç–µ–ª. –°—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω.")
    bot.answer_callback_query(call.id)

def auto_clear():
    while True:
        now = datetime.datetime.now()
        if now.hour == 2 and now.minute == 0:
            db.execute_query("DELETE FROM numbers")
            db.reset_counter()
            for user_id in user_data:
                user_data[user_id]['whatsapp'] = []
                user_data[user_id]['telegram'] = []
            bot.send_message(config.ADMIN_ID, f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            time.sleep(60)

Thread(target=auto_clear).start()

def show_back_button(message):
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back')
    markup.add(back_button)
    bot.send_message(message.chat.id, "üîô –ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'go_back')
def handle_back(call):
    show_main_menu(call.message)
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: message.text == '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø')
def request_access(message):
    user_id = message.from_user.id
    bot.send_message(config.ADMIN_ID, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username} (ID: {user_id}).", reply_markup=admin_approval_markup(user_id))
    bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ –∑–∞—è–≤–∫–∏')
def view_requests(message):
    user_id = message.from_user.id
    if str(user_id) == config.ADMIN_ID:
        pending_requests = db.fetch_all("SELECT * FROM requests WHERE status = 'pending'")
        if pending_requests:
            response = "–ó–∞—è–≤–∫–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n\n"
            markup = types.InlineKeyboardMarkup(row_width=1)
            for req in pending_requests:
                response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{req['username']} (ID: {req['user_id']})\n"
                markup.add(types.InlineKeyboardButton(f"–ó–∞—è–≤–∫–∞ –æ—Ç @{req['username']}", callback_data=f"show_request_{req['user_id']}"))
            bot.send_message(message.chat.id, response, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_request_'))
def show_request(call):
    user_id = int(call.data.split('_')[2])
    request = db.fetch_one("SELECT * FROM requests WHERE user_id = ? AND status = 'pending'", (user_id,))
    if request:
        response = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{request['username']} (ID: {request['user_id']})\n"
        response += "–û–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –û—Ç–∫–∞–∑–∞—Ç—å?"
        bot.send_message(call.message.chat.id, response, reply_markup=admin_approval_markup(user_id))
    else:
        bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=['admin_stats'])
def admin_stats(message):
    user_id = message.from_user.id
    if str(user_id) == config.ADMIN_ID:
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user in user_data:
            response += f"/uid{user} [@{bot.get_chat(user).username}]: WhatsApp {len(user_data[user]['whatsapp'])}/0/0/0/0 Telegram: {len(user_data[user]['telegram'])}/0\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('decrement_counter_'))
def decrement_counter_handler(call):
    number = call.data.split('_')[2]
    db.decrement_counter()
    db.execute_query("DELETE FROM numbers WHERE number = ?", (number,))
    bot.send_message(call.message.chat.id, f"–ù–æ–º–µ—Ä {number} —Å–ª–µ—Ç–µ–ª. –°—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω.")
    bot.answer_callback_query(call.id)

def finalize_number_status(number, chat_id, message_id):
    number_info = db.fetch_one("SELECT success FROM numbers WHERE number = ?", (number,))
    if number_info and number_info[0] == 0: 
        db.mark_successful(number)
        bot.send_message(chat_id, f"–ù–æ–º–µ—Ä {number} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —É–¥–∞—á–Ω—ã–µ.")
        bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)


def deactivate_decrement_button(chat_id, message_id, number):
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton('‚ùå–°–ª—ë—Ç (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)', callback_data=f'decrement_counter_{number}', disable_web_page_preview=True)
    markup.add(btn)
    bot.edit_message_reply_markup(chat_id, message_id, reply_markup=markup)
    finalize_number_status(number, chat_id, message_id)

# –ö–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã –≤ –ë–ª–µ–∫–¥–∂–µ–∫
cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11]  # 10 - –≤–∞–ª–µ—Ç, –¥–∞–º–∞, –∫–æ—Ä–æ–ª—å; 11 - —Ç—É–∑

# –ö–æ–º–∞–Ω–¥–∞ /casino
@bot.message_handler(commands=['casino'])
def casino(message):
    markup = types.InlineKeyboardMarkup()
    btn_blackjack = types.InlineKeyboardButton("–ë–ª–µ–∫–¥–∂–µ–∫", callback_data="game_blackjack")
    btn_roulette = types.InlineKeyboardButton("–†—É–ª–µ—Ç–∫–∞", callback_data="game_roulette")
    markup.add(btn_blackjack, btn_roulette)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('game_'))
def game_selection(call):
    if call.data == "game_blackjack":
        send_blackjack_rules(call.message)
    elif call.data == "game_roulette":
        send_roulette_rules(call.message)

# –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –ë–ª–µ–∫–¥–∂–µ–∫
def send_blackjack_rules(message):
    rules = ("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –ë–ª–µ–∫–¥–∂–µ–∫:\n"
             "–¶–µ–ª—å –∏–≥—Ä—ã - –Ω–∞–±—Ä–∞—Ç—å 21 –æ—á–∫–æ –∏–ª–∏ –±–ª–∏–∑–∫–æ–µ –∫ —ç—Ç–æ–º—É —á–∏—Å–ª–æ, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è –µ–≥–æ.\n"
             "–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –∏–º–µ–µ—Ç —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: —á–∏—Å–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É, –∫–∞—Ä—Ç–∏–Ω–∫–∏ - 10 –æ—á–∫–æ–≤, —Ç—É–∑ - 1 –∏–ª–∏ 11 –æ—á–∫–æ–≤.")
    markup = types.InlineKeyboardMarkup()
    btn_next = types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="bet_blackjack")
    markup.add(btn_next)
    bot.send_message(message.chat.id, rules, reply_markup=markup)

# –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –†—É–ª–µ—Ç–∫–∞
def send_roulette_rules(message):
    rules = ("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –†—É–ª–µ—Ç–∫–∞:\n"
             "–¶–µ–ª—å –∏–≥—Ä—ã - —É–≥–∞–¥–∞—Ç—å –Ω–æ–º–µ—Ä –∏–ª–∏ —Ü–≤–µ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —à–∞—Ä–∏–∫.\n"
             "–ú–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä–∞, —Ü–≤–µ—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã —á–∏—Å–µ–ª.")
    markup = types.InlineKeyboardMarkup()
    btn_next = types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="bet_roulette")
    markup.add(btn_next)
    bot.send_message(message.chat.id, rules, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –ë–ª–µ–∫–¥–∂–µ–∫
@bot.callback_query_handler(func=lambda call: call.data == "bet_blackjack")
def bet_blackjack(call):
    user_id = call.from_user.id
    earnings = db.fetch_user_earnings(user_id)
    if earnings > 0:
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
        bot.register_next_step_handler(msg, start_blackjack)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")

def start_blackjack(message):
    user_id = message.from_user.id
    try:
        bet = float(message.text)
        if bet <= 0:
            raise ValueError("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))
        return

    earnings = db.fetch_user_earnings(user_id)
    if bet > earnings:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    player_hand = [random.choice(cards)]
    dealer_hand = [random.choice(cards)]

    db.execute_query("INSERT OR REPLACE INTO blackjack_game (user_id, player_hand, dealer_hand, bet) VALUES (?, ?, ?, ?)",
                     (user_id, str(player_hand), str(dealer_hand), bet))

    send_blackjack_status(message.chat.id, player_hand, dealer_hand, user_id)

def send_blackjack_status(chat_id, player_hand, dealer_hand, user_id):
    player_score = sum(player_hand)
    dealer_score = dealer_hand[0]
    markup = types.InlineKeyboardMarkup()
    btn_hit = types.InlineKeyboardButton("–í–∑—è—Ç—å", callback_data=f"hit_{user_id}")
    btn_stand = types.InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç", callback_data=f"stand_{user_id}")
    markup.add(btn_hit, btn_stand)
    bot.send_message(chat_id, f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player_hand} (–æ—á–∫–æ–≤: {player_score})\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {dealer_hand[0]}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('hit_'))
def hit(call):
    user_id = int(call.data.split('_')[1])
    game = db.fetch_one("SELECT player_hand, dealer_hand, bet FROM blackjack_game WHERE user_id = ?", (user_id,))
    if game:
        player_hand = eval(game[0])
        dealer_hand = eval(game[1])
        bet = game[2]

        player_hand.append(random.choice(cards))

        if sum(player_hand) > 21:
            bot.send_message(call.message.chat.id, f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player_hand} (–æ—á–∫–æ–≤: {sum(player_hand)})\n–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")
            db.update_earnings(user_id, -bet)
            db.execute_query("DELETE FROM blackjack_game WHERE user_id = ?", (user_id,))
        else:
            send_blackjack_status(call.message.chat.id, player_hand, dealer_hand, user_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('stand_'))
def stand(call):
    user_id = int(call.data.split('_')[1])
    game = db.fetch_one("SELECT player_hand, dealer_hand, bet FROM blackjack_game WHERE user_id = ?", (user_id,))
    if game:
        player_hand = eval(game[0])
        dealer_hand = eval(game[1])
        bet = game[2]

        while sum(dealer_hand) < 17:
            dealer_hand.append(random.choice(cards))

        player_score = sum(player_hand)
        dealer_score = sum(dealer_hand)

        result_msg = f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {player_hand} (–æ—á–∫–æ–≤: {player_score})\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {dealer_hand} (–æ—á–∫–æ–≤: {dealer_score})\n"
        if dealer_score > 21 or player_score > dealer_score:
            result_msg += "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
            db.update_earnings(user_id, bet)
        else:
            result_msg += "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
            db.update_earnings(user_id, -bet)

        bot.send_message(call.message.chat.id, result_msg)
        db.execute_query("DELETE FROM blackjack_game WHERE user_id = ?", (user_id,))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –†—É–ª–µ—Ç–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "bet_roulette")
def bet_roulette(call):
    user_id = call.from_user.id
    earnings = db.fetch_user_earnings(user_id)
    if earnings > 0:
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
        bot.register_next_step_handler(msg, choose_roulette_color)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")

def choose_roulette_color(message):
    user_id = message.from_user.id
    try:
        bet = float(message.text)
        if bet <= 0:
            raise ValueError("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))
        return

    earnings = db.fetch_user_earnings(user_id)
    if bet > earnings:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    markup = types.InlineKeyboardMarkup()
    btn_red = types.InlineKeyboardButton("–ö—Ä–∞—Å–Ω—ã–π", callback_data=f"color_red_{bet}")
    btn_black = types.InlineKeyboardButton("–ß—ë—Ä–Ω—ã–π", callback_data=f"color_black_{bet}")
    btn_green = types.InlineKeyboardButton("–ó–µ–ª—ë–Ω—ã–π", callback_data=f"color_green_{bet}")
    markup.add(btn_red, btn_black, btn_green)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('color_'))
def spin_roulette(call):
    color = call.data.split('_')[1]
    bet = float(call.data.split('_')[2])
    user_id = call.from_user.id

    emoji_wheel = ["üî¥", "‚ö´Ô∏è", "üî¥", "‚ö´Ô∏è", "üü¢", "‚ö´Ô∏è", "üî¥", "‚ö´Ô∏è", "üî¥"] * 4 + ["üü¢"] * 2
    random.shuffle(emoji_wheel)
    spin_position = random.randint(0, len(emoji_wheel) - 1)

    def display_wheel(position, message_id):
        display = emoji_wheel[position:] + emoji_wheel[:position]
        display = display[:6]
        bot.edit_message_text(f"–†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è:\n{''.join(display)}\n-------^-------", call.message.chat.id, message_id)
        return position + 1 if position < len(emoji_wheel) - 1 else 0

    message_id = bot.send_message(call.message.chat.id, "–†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è:\nüî¥‚ö´Ô∏èüî¥‚ö´Ô∏èüü¢‚ö´Ô∏è\n-------^-------").message_id

    for _ in range(36):
        spin_position = display_wheel(spin_position, message_id)
        time.sleep(0.1)

    result_color = emoji_wheel[spin_position]
    win = False
    if (color == "red" and result_color == "üî¥") or (color == "black" and result_color == "‚ö´Ô∏è"):
        win = True
        payout = bet * 2
    elif color == "green" and result_color == "üü¢":
        win = True
        payout = bet * 10
    else:
        payout = -bet

    db.update_earnings(user_id, payout)
    result_msg = f"–†—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –Ω–∞ {result_color}.\n"
    result_msg += "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!" if win else "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
    bot.send_message(call.message.chat.id, result_msg)


# –ö–æ–º–∞–Ω–¥–∞ /setbalance –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–ª–∞–Ω—Å–∞
@bot.message_handler(commands=['setbalance'])
def set_balance(message):
    user_id = message.from_user.id
    if str(user_id) != config.ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        _, balance, target_id = message.text.split()
        balance = float(balance)
        target_id = int(target_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance {balance} {id}")
        return

    db.execute_query("UPDATE users SET earnings = ? WHERE user_id = ?", (balance, target_id))
    bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {balance}.")

def signal_handler(signal, frame):
    print('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...')
    bot.stop_polling()
    exit(0)

signal.signal(signal.SIGINT, signal_handler)

if __name__ == '__main__':
    add_role(config.ADMIN_ID, 'admin')
    try:
        bot.polling(none_stop=True, timeout=30)
    except KeyboardInterrupt:
        signal_handler(signal.SIGINT, None)