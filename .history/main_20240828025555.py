import telebot
from telebot import types
import datetime
import time
import threading
from threading import Thread, Timer
import random
import config
import signal
import requests
from requests.exceptions import ReadTimeout, ConnectionError
import random
import database as db 

bot = telebot.TeleBot(config.API_TOKEN, parse_mode='HTML')

active_timers = {}
user_data = {}
admin_data = {}
recently_issued_numbers = {
    'whatsapp': [],
    'telegram': []
}
sms_requests = {}
request_tracker = {}
request_ids = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö
request_counter = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –∑–∞–ø—Ä–æ—Å–æ–≤

def get_group_id(message):
    return message.chat.id

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥
def group_required(func):
    def wrapper(message, *args, **kwargs):
        group_id = get_group_id(message)
        if db.is_group_active(group_id):
            return func(message, *args, **kwargs)
        else:
            bot.send_message(group_id, "–ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /gadd.")
    return wrapper

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
@bot.message_handler(commands=['gadd'])
def add_group_command(message):
    group_id = get_group_id(message)
    if db.is_admin(message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add_group(group_id)
        bot.send_message(group_id, "–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö.")
    else:
        bot.send_message(group_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
@bot.message_handler(commands=['gdel'])
def delete_group_command(message):
    group_id = get_group_id(message)
    if db.is_admin(message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.remove_group(group_id)
        bot.send_message(group_id, "–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö.")
    else:
        bot.send_message(group_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(func=lambda message: message.text == 'üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É')
def change_price(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('WhatsApp', callback_data='change_price_whatsapp')
    btn2 = types.InlineKeyboardButton('Telegram', callback_data='change_price_telegram')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('change_price_'))
def select_service_to_change_price(call):
    service = call.data.split('_')[-1]
    current_price = db.get_price(service)
    msg = bot.send_message(call.message.chat.id, f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {current_price}$ –∑–∞ {service.capitalize()}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
    bot.register_next_step_handler(msg, process_new_price, service)

def process_new_price(message, service):
    try:
        new_price = float(message.text)
        db.update_price(service, new_price)
        bot.send_message(message.chat.id, f"–¶–µ–Ω–∞ –∑–∞ {service.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_price}$")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        change_price(message)

def retry_request(func, *args, retries=3, delay=2, **kwargs):
    for attempt in range(retries):
        try:
            return func(*args, **kwargs)
        except (ReadTimeout, ConnectionError):
            if attempt < retries - 1:
                time.sleep(delay)
            else:
                raise

def init_user_data(user_id, username):
    user = db.fetch_one("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not user:
        db.execute_query("INSERT INTO users (user_id, username, status, last_request_time, roles) VALUES (?, ?, ?, ?, ?)",
                         (user_id, username, 'pending', None, ''))
    else:
        roles = user[4].split(',')
        if str(user_id) == config.ADMIN_ID and 'admin' not in roles:
            add_role(user_id, 'admin')

def add_role(user_id, role):
    user = db.fetch_one("SELECT roles FROM users WHERE user_id = ?", (user_id,))
    if user:
        roles = user[0]
        if role not in roles.split(','):
            roles = roles + f",{role}" if roles else role
            db.execute_query("UPDATE users SET roles = ? WHERE user_id = ?", (roles, user_id))

def remove_role(user_id, role):
    user = db.fetch_one("SELECT roles FROM users WHERE user_id = ?", (user_id,))
    if user:
        roles = user[0].split(',')
        if role in roles:
            roles.remove(role)
            db.execute_query("UPDATE users SET roles = ? WHERE user_id = ?", (','.join(roles), user_id))
            if role == 'worker':
                show_pending_menu_by_user_id(user_id)

def show_pending_menu_by_user_id(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ')
    markup.add(btn1)
    bot.send_message(user_id, "üîì <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.</b>", reply_markup=markup, parse_mode='HTML')

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username

    if str(user_id) == config.ADMIN_ID:
        add_role(user_id, 'admin')
        show_admin_main_menu(message)
        return

    init_user_data(user_id, username)
    user = db.fetch_one("SELECT status, roles FROM users WHERE user_id = ?", (user_id,))
    if user[0] == 'approved' or 'admin' in user[1].split(',') or 'worker' in user[1].split(','):
        user_data[user_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        btn1 = types.KeyboardButton('üîÑ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
        markup.add(btn1)
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüîÑ –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=markup)
    else:
        show_pending_menu(message)

def show_pending_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ')
    btn2 = types.KeyboardButton('–ú–æ–∏ –∑–∞—è–≤–∫–∏')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ')
def request_access(message):
    user_id = message.from_user.id
    username = message.from_user.username
    now = datetime.datetime.now()

    user = db.fetch_one("SELECT last_request_time FROM users WHERE user_id = ?", (user_id,))
    
    if user and user[0]:
        try:
            last_request_time = datetime.datetime.strptime(user[0], '%Y-%m-%d %H:%M:%S.%f')
        except ValueError:
            last_request_time = datetime.datetime.strptime(user[0], '%Y-%m-%d %H:%–ú:%S')

        if (now - last_request_time).total_seconds() < 10:
            bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏.")
            return

    db.execute_query("INSERT INTO requests (user_id, username, status, request_time) VALUES (?, ?, ?, ?)",
                     (user_id, username, 'pending', now))
    db.execute_query("UPDATE users SET last_request_time = ? WHERE user_id = ?", (now, user_id))
    
    bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    bot.send_message(config.ADMIN_ID, f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç @{username}", reply_markup=admin_approval_markup(user_id))

def admin_approval_markup(user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}")
    btn2 = types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{user_id}")
    markup.add(btn1, btn2)
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_'))
def approve_request(call):
    user_id = int(call.data.split('_')[1])
    db.execute_query("UPDATE users SET status = 'approved' WHERE user_id = ?", (user_id,))
    db.execute_query("UPDATE requests SET status = 'approved' WHERE user_id = ? AND status = 'pending'", (user_id,))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å worker –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
    add_role(user_id, 'worker')

    bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
    bot.send_message(user_id, "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    show_main_menu_by_user_id(user_id)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_'))
def reject_request(call):
    user_id = int(call.data.split('_')[1])
    db.execute_query("UPDATE requests SET status = 'rejected' WHERE user_id = ? AND status = 'pending'", (user_id,))
    bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    bot.send_message(user_id, "–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞.")
    bot.answer_callback_query(call.id)

def show_main_menu_by_user_id(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
    btn2 = types.KeyboardButton('üìä –ü—Ä–æ—Ñ–∏–ª—å')
    btn3 = types.KeyboardButton('üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
    btn4 = types.KeyboardButton('‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(user_id, "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", reply_markup=markup)

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
    btn2 = types.KeyboardButton('üìä –ü—Ä–æ—Ñ–∏–ª—å')
    btn3 = types.KeyboardButton('üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
    btn4 = types.KeyboardButton('‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", reply_markup=markup)

def show_admin_main_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
    btn2 = types.KeyboardButton('üìä –ü—Ä–æ—Ñ–∏–ª—å')
    btn3 = types.KeyboardButton('üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
    btn4 = types.KeyboardButton('‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    btn5 = types.KeyboardButton('üîß –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.chat.id, "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", reply_markup=markup)

def show_admin_main_menu_by_user_id(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
    btn2 = types.KeyboardButton('üìä –ü—Ä–æ—Ñ–∏–ª—å')
    btn3 = types.KeyboardButton('üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
    btn4 = types.KeyboardButton('‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    btn5 = types.KeyboardButton('üîß –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(user_id, "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üîß –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
def admin_panel(message):
    user_id = message.from_user.id
    if db.can_access_admin_panel(user_id):
        show_admin_panel(message)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

@bot.message_handler(func=lambda message: message.text == 'üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
def handle_exit_admin_panel(message):
    user_id = message.from_user.id
    user_roles = db.fetch_one("SELECT roles FROM users WHERE user_id = ?", (user_id,))
    if user_roles and 'admin' in user_roles[0].split(','):
        show_admin_main_menu(message)
    else:
        show_main_menu(message)

def show_admin_panel(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn1 = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    btn2 = types.KeyboardButton('üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')
    btn3 = types.KeyboardButton('üë• –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤')
    btn4 = types.KeyboardButton('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É')
    btn5 = types.KeyboardButton('üîÑ –û–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    btn6 = types.KeyboardButton('üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    bot.send_message(message.chat.id, "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üîÑ –û–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
def reset_stats_handler(message):
    user_id = message.from_user.id
    
    if db.is_admin(user_id):
        reset_worker_stats()  # –û–±–Ω—É–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
        db.reset_counter()  # –û–±–Ω—É–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        db.execute_query("DELETE FROM numbers")  # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –Ω–æ–º–µ—Ä–æ–≤

        bot.send_message(message.chat.id, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –æ–±–Ω—É–ª–µ–Ω–∞, –æ—á–µ—Ä–µ–¥—å –Ω–æ–º–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def reset_worker_stats():
    workers = db.fetch_all("SELECT user_id FROM users WHERE roles LIKE '%worker%'")
    for worker in workers:
        db.execute_query("UPDATE users SET earnings = 0 WHERE user_id = ?", (worker[0],))

@bot.message_handler(func=lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def show_stats(message):
    stats = db.get_stats()
    response = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {stats[0]}:\n\n"
    response += f"WhatsApp - –£–¥–∞—á–Ω—ã—Ö: {stats[1]}, –í—Å–µ–≥–æ: {stats[2]}\n"
    response += f"Telegram - –£–¥–∞—á–Ω—ã—Ö: {stats[3]}, –í—Å–µ–≥–æ: {stats[4]}\n"
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == 'üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')
def list_admins(message):
    if not db.can_access_admin_list(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    admins = db.fetch_all("SELECT user_id, username FROM users WHERE roles LIKE '%admin%'")
    response = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    markup = types.InlineKeyboardMarkup()
    for admin in admins:
        response += f"@{admin[1]} (ID: {admin[0]})\n"
        if str(admin[0]) != config.ADMIN_ID:  
            markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å @{admin[1]}", callback_data=f"remove_admin_{admin[0]}"))
    markup.add(types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data='add_admin'))
    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üë• –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤')
def list_workers(message):
    if not db.can_access_worker_list(message.from_user.id) and not db.is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    workers = db.fetch_all("SELECT user_id, username FROM users WHERE roles LIKE '%worker%'")
    response = "–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:\n\n"
    markup = types.InlineKeyboardMarkup()
    for worker in workers:
        response += f"@{worker[1]} (ID: {worker[0]})\n"
        markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å @{worker[1]}", callback_data=f"remove_worker_{worker[0]}"))
    markup.add(types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data='add_worker'))
    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'add_worker')
def add_worker(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏:")
    bot.register_next_step_handler(msg, process_add_worker)

def process_add_worker(message):
    try:
        user_id = int(message.text)
        add_role(user_id, 'worker')
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏.")
        show_main_menu_by_user_id(user_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.callback_query_handler(func=lambda call: call.data == 'add_admin')
def add_admin(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:")
    bot.register_next_step_handler(msg, process_add_admin)

def process_add_admin(message):
    try:
        user_id = int(message.text)
        add_role(user_id, 'admin')
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        show_admin_main_menu_by_user_id(user_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_admin_'))
def remove_admin(call):
    user_id = int(call.data.split('_')[2])
    remove_role(user_id, 'admin')
    bot.send_message(call.message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    list_admins(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_worker_'))
def remove_worker(call):
    user_id = int(call.data.split('_')[2])
    
    # –°–Ω–∏–º–∞–µ–º —Ä–æ–ª—å 'worker' —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    remove_role(user_id, 'worker')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–Ω—è—Ç–∏–∏ —Ä–æ–ª–∏
    bot.send_message(user_id, "üîì <b>–í–∞—à–∞ —Ä–æ–ª—å 'worker' –±—ã–ª–∞ —Å–Ω—è—Ç–∞. –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç.</b>", parse_mode='HTML')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø'
    show_pending_menu_by_user_id(user_id)

    # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–Ω—è—Ç–∏–∏ —Ä–æ–ª–∏
    bot.send_message(call.message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    list_workers(call.message)

    bot.answer_callback_query(call.id)


@bot.message_handler(func=lambda message: message.text == 'üîÑ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
def start_work(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}
    user_data[user_id]['start_time'] = datetime.datetime.now()

    user_roles = db.fetch_one("SELECT roles FROM users WHERE user_id = ?", (user_id,))
    if user_roles and 'admin' in user_roles[0].split(','):
        show_admin_main_menu(message)
    else:
        show_main_menu(message)

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞')
def add_numbers(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("WhatsApp", callback_data="add_whatsapp")
    btn2 = types.InlineKeyboardButton("Telegram", callback_data="add_telegram")
    markup.add(btn1, btn2)
    back_button = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back')
    markup.add(back_button)
    
    try:
        retry_request(bot.send_message, message.chat.id, "üì≤ –í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä:", reply_markup=markup)
    except (ReadTimeout, ConnectionError):
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data in ['add_whatsapp', 'add_telegram'])
def choose_service(call):
    service = call.data.split('_')[1]
    msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è {service.capitalize()} –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9123456789, –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:")
    bot.register_next_step_handler(msg, process_numbers, service)
    show_back_button(call.message)
    
def process_numbers(message, service):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}
    
    numbers = message.text.split('\n')
    valid_numbers = []
    invalid_numbers = 0
    
    current_numbers_count = len(user_data[user_id][service])
    max_numbers_limit = 25 if service == 'whatsapp' else 50

    for number in numbers:
        if len(number) == 10 and number.isdigit():
            if current_numbers_count < max_numbers_limit:
                valid_numbers.append({'number': number, 'timestamp': datetime.datetime.now(), 'user_id': user_id})
                current_numbers_count += 1
            else:
                break
        else:
            invalid_numbers += 1

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for number in valid_numbers:
        db.execute_query("INSERT INTO numbers (number, service, user_id, add_date, add_time) VALUES (?, ?, ?, ?, ?)",
                         (number['number'], service, user_id, number['timestamp'].date(), number['timestamp'].time().strftime('%H:%M:%S')))
    
    # –°—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    active_numbers_count = db.fetch_one("SELECT COUNT(*) FROM numbers WHERE user_id = ? AND success = 0", (user_id,))[0]
    
    response = f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ {service.capitalize()} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
    response += f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(valid_numbers)}\n"
    response += f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å: {invalid_numbers}\n"
    response += f"üî¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(numbers)}\n"
    response += f"üìã –í–∞—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {active_numbers_count}\n"  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    bot.send_message(message.chat.id, response)
    show_back_button(message)

@bot.message_handler(func=lambda message: message.text == 'üìä –ü—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ user_data
    if user_id not in user_data:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return

    # –°—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞—á–Ω—ã—Ö –∏ —Å–ª–µ—Ç–µ–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    whatsapp_success = db.fetch_one("SELECT COUNT(*) FROM numbers WHERE user_id = ? AND service = 'whatsapp' AND success = 1", (user_id,))[0]
    whatsapp_failed = db.fetch_one("SELECT COUNT(*) FROM numbers WHERE user_id = ? AND service = 'whatsapp' AND failed = 1", (user_id,))[0]
    whatsapp_total = db.fetch_one("SELECT COUNT(*) FROM numbers WHERE user_id = ? AND service = 'whatsapp'", (user_id,))[0]

    telegram_success = db.fetch_one("SELECT COUNT(*) FROM numbers WHERE user_id = ? AND service = 'telegram' AND success = 1", (user_id,))[0]
    telegram_failed = db.fetch_one("SELECT COUNT(*) FROM numbers WHERE user_id = ? AND service = 'telegram' AND failed = 1", (user_id,))[0]
    telegram_total = db.fetch_one("SELECT COUNT(*) FROM numbers WHERE user_id = ? AND service = 'telegram'", (user_id,))[0]

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è db.get_price)
    whatsapp_price = db.get_price('whatsapp')
    telegram_price = db.get_price('telegram')

    # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    whatsapp_earnings = whatsapp_success * whatsapp_price
    telegram_earnings = telegram_success * telegram_price

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    response = f"üß∏ –í—ã {message.from_user.username}\n"
    response += f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.date.today().strftime('%d-%m-%Y')}\n"
    response += f"üü¢ WhatsApp:\n"
    response += f"–£–¥–∞—á–Ω—ã—Ö: {whatsapp_success}\n"
    response += f"–°–ª–µ—Ç–µ–≤—à–∏—Ö: {whatsapp_failed}\n"
    response += f"–í—Å–µ–≥–æ: {whatsapp_total}\n"
    response += f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {whatsapp_earnings}$\n\n"  # –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ

    response += f"üîµ Telegram:\n"
    response += f"–£–¥–∞—á–Ω—ã—Ö: {telegram_success}\n"
    response += f"–°–ª–µ—Ç–µ–≤—à–∏—Ö: {telegram_failed}\n"
    response += f"–í—Å–µ–≥–æ: {telegram_total}\n"
    response += f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {telegram_earnings}$\n"  # –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ

    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == 'üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞')
def show_added_numbers(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞.")
        return

    page = 0
    show_numbers_page(message, user_id, page)

def show_numbers_page(message, user_id, page):
    markup = types.InlineKeyboardMarkup()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞, –∏—Å–∫–ª—é—á–∞—è —É—Å–ø–µ—à–Ω—ã–µ –∏ —Å–ª–µ—Ç–µ–≤—à–∏–µ
    numbers = db.fetch_all(
        "SELECT number_id, number, add_date, add_time, service FROM numbers WHERE user_id = ? AND success = 0 AND failed = 0", 
        (user_id,)
    )

    if not numbers:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.")
        return

    start_index = page * 4
    end_index = start_index + 4
    numbers_page = numbers[start_index:end_index]

    for entry in numbers_page:
        number_id = entry[0]
        number = entry[1]
        timestamp = f"{entry[2]} {entry[3]}"
        service = entry[4]

        service_emoji = "üü¢" if service == "whatsapp" else "üîµ"
        btn_text = f"{service_emoji} {timestamp} - {number}"
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"confirm_delete_{number_id}"))

    if start_index > 0:
        markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'prev_page_{page-1}'))
    if end_index < len(numbers):
        markup.add(types.InlineKeyboardButton('‚û°Ô∏è –í–ø–µ—Ä–µ–¥', callback_data=f'next_page_{page+1}'))

    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back'))
    bot.send_message(message.chat.id, "–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_'))
def confirm_delete_number(call):
    number_id = call.data.split('_')[2]
    markup = types.InlineKeyboardMarkup()
    btn_yes = types.InlineKeyboardButton('–î–∞', callback_data=f'delete_number_{number_id}')
    btn_no = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='cancel_delete')
    markup.add(btn_yes, btn_no)
    bot.send_message(call.message.chat.id, f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å ID {number_id} –∏–∑ –æ—á–µ—Ä–µ–¥–∏?", reply_markup=markup)
    bot.answer_callback_query(call.id)

def print_numbers_table():
    rows = db.fetch_all("SELECT * FROM numbers")
    for row in rows:
        print(row)

def delete_number_entry(number, add_date, add_time):
    print(f"Deleting number {number} with add_date {add_date} and add_time {add_time}")
    db.execute_query("DELETE FROM numbers WHERE number = ? AND add_date = ? AND add_time = ?", (number, add_date, add_time))
    # Verify if the number is deleted
    result = db.fetch_one("SELECT * FROM numbers WHERE number = ? AND add_date = ? AND add_time = ?", (number, add_date, add_time))
    if result:
        print(f"Number {number} still exists in the database: {result}")
    else:
        print(f"Number {number} successfully deleted from the database.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_number_'))
def delete_number(call):
    try:
        number_id = call.data.split('_')[2]
        user_id = call.from_user.id

        number_data = db.fetch_one("SELECT user_id FROM numbers WHERE number_id = ?", (number_id,))
        if number_data and number_data[0] == user_id:
            db.execute_query("DELETE FROM numbers WHERE number_id = ?", (number_id,))
            remaining_number = db.fetch_one("SELECT * FROM numbers WHERE number_id = ?", (number_id,))
            if not remaining_number:
                bot.send_message(user_id, f"–ù–æ–º–µ—Ä —Å ID {number_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏!")
                update_message_with_numbers(call.message, user_id)
            else:
                bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä.")
        else:
            bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞: {e}")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_delete')
def cancel_delete(call):
    bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    show_numbers_page(call.message, call.from_user.id, 0)


@bot.callback_query_handler(func=lambda call: call.data.startswith('prev_page_') or call.data.startswith('next_page_'))
def handle_pagination(call):
    user_id = call.from_user.id
    page = int(call.data.split('_')[-1])
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_numbers_page(call.message, user_id, page)

@bot.message_handler(func=lambda message: message.text == '‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
def end_work(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'whatsapp': [], 'telegram': [], 'start_time': None, 'sms_requests': {}}

    user_data[user_id]['start_time'] = None
    user_data[user_id]['whatsapp'] = []
    user_data[user_id]['telegram'] = []

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.execute_query("DELETE FROM numbers WHERE user_id = ?", (user_id,))
    
    bot.send_message(message.chat.id, "‚èπÔ∏è –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ –≤–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–æ–º–µ—Ä–æ–≤
    remove_all_number_buttons(message)

def remove_all_number_buttons(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back'))
    bot.edit_message_reply_markup(message.chat.id, message.message_id, reply_markup=markup)

@bot.message_handler(commands=['rm'])
def remove_numbers(message):
    numbers = message.text.split()[1:]
    for number in numbers:
        db.execute_query("DELETE FROM numbers WHERE number = ?", (number,))
        bot.send_message(message.chat.id, f"–ù–æ–º–µ—Ä {number} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

@bot.message_handler(func=lambda message: message.text.lower() in ['–≤–æ—Ç—Å', '—Ç–µ–ª–µ–≥–∞'])
@group_required
def handle_purchase(message):
    group_id = get_group_id(message)
    service = 'whatsapp' if message.text.lower() == '–≤–æ—Ç—Å' else 'telegram'
    
    queue_data = db.fetch_all("SELECT * FROM numbers WHERE service = ? AND issued_to IS NULL AND group_id IS NULL", (service,))
    
    if queue_data:
        number_entry = random.choice(queue_data)
        number = number_entry[1]

        db.execute_query("UPDATE numbers SET issued_to = ?, issued_time = ?, group_id = ?, success = 0, failed = 0 WHERE number = ?",
                         (message.from_user.id, datetime.datetime.now(), group_id, number))

        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –°–ú–°', callback_data=f'request_sms_{number}'),
            types.InlineKeyboardButton('–ó–∞–º–µ–Ω–∞', callback_data=f'replace_number_{number}'),
        )

        bot.send_message(message.chat.id, f"üì± <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>", reply_markup=markup)

        bot.send_message(message.from_user.id, f"üì≤ <b>–ù–æ–º–µ—Ä {number} –±—ã–ª –≤—ã–¥–∞–Ω –≤–∞–º.</b>")
        db.increment_counter()
        db.update_stats(service, success=False)

        timer = threading.Timer(120, return_number_to_queue, args=(number, message.chat.id))
        active_timers[number] = timer
        timer.start()
    else:
        bot.send_message(message.chat.id, f"‚òπÔ∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è {service.capitalize()}.</b>")

def return_number_to_queue(number, chat_id):
    number_data = db.fetch_one("SELECT issued_to, success, failed, group_id FROM numbers WHERE number = ?", (number,))
    
    if number_data:
        issued_to, success, failed, group_id = number_data
        
        if failed == 1:
            return
        
        if success == 0:
            db.execute_query("UPDATE numbers SET issued_to = NULL, issued_time = NULL, group_id = NULL WHERE number = ? AND success = 0", (number,))
            bot.send_message(group_id, f"–í—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –°–ú–° –∏—Å—Ç–µ–∫–ª–æ. –ù–æ–º–µ—Ä {number} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")

    if number in active_timers:
        del active_timers[number]

def replace_number_after_timeout(message, number, worker_id):
    issued_to = db.fetch_one("SELECT issued_to FROM numbers WHERE number = ? AND success = 0", (number,))
    if issued_to:
        issued_to = issued_to[0]
        db.execute_query("UPDATE numbers SET issued_to = NULL, issued_time = NULL WHERE number = ? AND success = 0", (number,))
        bot.send_message(worker_id, f"–í—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} –∏—Å—Ç–µ–∫–ª–æ. –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
        
        service_data = db.fetch_one("SELECT service FROM numbers WHERE number = ?", (number,))
        if service_data:
            service = service_data[0]
            queue_data = db.fetch_all("SELECT number FROM numbers WHERE service = ? AND issued_to IS NULL", (service,))
            if queue_data:
                new_number = random.choice(queue_data)[0]
                db.execute_query("UPDATE numbers SET issued_to = ?, issued_time = ? WHERE number = ?",
                                 (issued_to, datetime.datetime.now(), new_number))
                markup = types.InlineKeyboardMarkup(row_width=1)
                markup.add(
                    types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –°–ú–°', callback_data=f'request_sms_{new_number}'),
                    types.InlineKeyboardButton('–ó–∞–º–µ–Ω–∞', callback_data=f'replace_number_{new_number}'),
                )
                bot.send_message(issued_to, f"–í–∞—à –Ω–æ–º–µ—Ä –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω. –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{new_number}</code>", reply_markup=markup)
                bot.send_message(worker_id, f"–ù–æ–º–µ—Ä {new_number} –±—ã–ª –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {issued_to}.")
                db.increment_counter()
                db.update_stats(service, success=False)
            else:
                bot.send_message(issued_to, f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è {service.capitalize()} –¥–ª—è –∑–∞–º–µ–Ω—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('request_sms_'))
def request_sms(call):
    global request_counter
    number = call.data.split('_')[2]
    buyer_id = call.from_user.id

    number_data = db.fetch_one("SELECT issued_to, group_id FROM numbers WHERE number = ?", (number,))
    if not number_data:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    issued_to, group_id = number_data

    if issued_to != buyer_id:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        return

    worker_id = db.get_worker_id_by_number(number)
    
    if worker_id:
        request_counter += 1
        request_id = request_counter

        if worker_id not in request_ids:
            request_ids[worker_id] = {}

        request_ids[worker_id][request_id] = {
            'number': number,
            'worker_id': worker_id,
            'target_user_id': buyer_id,
            'group_id': group_id,
            'message_id': None,
            'status': 'pending'
        }

        service = db.get_service_by_number(number)
        service_emoji = "üü¢" if service == "whatsapp" else "üîµ"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –°–ú–°
        request_msg = bot.send_message(
            worker_id,
            f"üîî <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–º—Å –∫ –Ω–æ–º–µ—Ä—É {service_emoji} {service.capitalize()} <code>{number}</code></b>\n\n"
            f"‚ùó <b>–£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã!</b>\n\n"
            f"üÜî <b>ID: {request_id}</b>",
            reply_markup=worker_sms_markup(number),
            parse_mode='HTML'
        )

        request_ids[worker_id][request_id]['message_id'] = request_msg.message_id

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if number in active_timers:
            active_timers[number].cancel()
            del active_timers[number]

        bot.send_message(buyer_id, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –°–ú–° –ø–æ –Ω–æ–º–µ—Ä—É <code>{number}</code> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", parse_mode='HTML')

        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –°–ú–° (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ)', callback_data=f'request_sms_{number}', disable_web_page_preview=True))
        markup.add(types.InlineKeyboardButton('–ó–∞–º–µ–Ω–∞', callback_data=f'replace_number_{number}'))

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–∞–±–æ—Ç–Ω–∏–∫—É.")

    bot.answer_callback_query(call.id)

def worker_sms_markup(number):
    markup = types.InlineKeyboardMarkup(row_width=1)
    cancel_button = types.InlineKeyboardButton('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data=f'cancel_sms_{number}')
    markup.add(cancel_button)
    return markup

def receive_sms(message, request_id):
    worker_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º request_id –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    if worker_id in request_ids and request_id in request_ids[worker_id]:
        request_info = request_ids[worker_id][request_id]
        number = request_info['number']
        target_user_id = request_info['target_user_id']
        group_id = request_info['group_id']  # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        if message.reply_to_message and message.reply_to_message.message_id == request_info['message_id']:
            issued_to = db.fetch_one("SELECT issued_to FROM numbers WHERE number = ?", (number,))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª SMS
            if issued_to and issued_to[0] == target_user_id:
                response = f"–ù–æ–º–µ—Ä: <a href='tel:{number}'>{number}</a>\n<b>SMS:</b> {message.text}\n+{db.get_counter()}"
                markup = telebot.types.InlineKeyboardMarkup(row_width=1)
                decrement_button = telebot.types.InlineKeyboardButton('‚ùå–°–ª—ë—Ç', callback_data=f'decrement_counter_{number}')
                markup.add(decrement_button)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—É –∂–µ –≥—Ä—É–ø–ø—É, –≥–¥–µ –±—ã–ª –∑–∞–ø—Ä–æ—à–µ–Ω –Ω–æ–º–µ—Ä
                sent_msg = bot.send_message(group_id, response, reply_markup=markup, parse_mode='HTML')

                if 'successful' not in recently_issued_numbers:
                    recently_issued_numbers['successful'] = []
                recently_issued_numbers['successful'].append(number)

                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 100 —Å–µ–∫—É–Ω–¥
                threading.Timer(100, deactivate_decrement_button, args=(group_id, sent_msg.message_id, number)).start()

                # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                del request_ids[worker_id][request_id]

                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.send_message(worker_id, "üîº <b>–ö–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>")
                bot.send_message(target_user_id, f"‚úâÔ∏è <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É <a href='tel:{number}'>{number}</a> –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.</b>")
            else:
                bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        else:
            bot.send_message(message.chat.id, "–°–ú–° –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º.")
    else:
        bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

@bot.message_handler(func=lambda message: message.reply_to_message is not None)
def handle_reply(message):
    replied_message_id = message.reply_to_message.message_id

    # –ò—â–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º –∂–µ message_id
    for user_id, requests in request_ids.items():
        for request_id, request_info in requests.items():
            if request_info['message_id'] == replied_message_id and request_info['status'] == 'pending':
                receive_sms(message, request_id)
                return

    bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –°–ú–° –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('replace_number_'))
def replace_number(call):
    number = call.data.split('_')[2]
    service_data = db.fetch_one("SELECT service, group_id FROM numbers WHERE number = ?", (number,))
    
    if service_data:
        service, group_id = service_data
        
        all_numbers = db.fetch_all("SELECT number FROM numbers WHERE service = ? AND issued_to IS NULL", (service,))
        available_numbers = [entry[0] for entry in all_numbers if entry[0] not in recently_issued_numbers.get(service, [])]

        if not available_numbers:
            available_numbers = [entry[0] for entry in all_numbers]
            recently_issued_numbers[service] = []

        new_number = random.choice(available_numbers)
        recently_issued_numbers[service].append(new_number)

        if len(recently_issued_numbers[service]) > len(all_numbers):
            recently_issued_numbers[service].pop(0)

        db.execute_query("UPDATE numbers SET issued_to = ?, issued_time = ?, group_id = ? WHERE number = ?",
                         (call.from_user.id, datetime.datetime.now(), group_id, new_number))
        db.execute_query("UPDATE numbers SET issued_to = NULL, issued_time = NULL, group_id = NULL WHERE number = ?", (number,))

        markup = types.InlineKeyboardMarkup(row_width=1)
        sms_button = types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –°–ú–°', callback_data=f'request_sms_{new_number}')
        replace_button = types.InlineKeyboardButton('–ó–∞–º–µ–Ω–∞', callback_data=f'replace_number_{new_number}')
        markup.add(sms_button, replace_button)

        bot.edit_message_text(f"üîÑ <b>–í–∞—à –Ω–æ–º–µ—Ä –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω. –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä:</b> <code>{new_number}</code>", 
                              call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–∏—Å –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_sms_'))
def cancel_sms(call):
    number = call.data.split('_')[2]
    worker_id = call.from_user.id

    number_data = db.fetch_one("SELECT issued_to, group_id FROM numbers WHERE number = ?", (number,))
    if not number_data:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    issued_to, group_id = number_data

    if issued_to == worker_id:
        db.execute_query("UPDATE numbers SET issued_to = NULL, issued_time = NULL, group_id = NULL WHERE number = ?", (number,))
        bot.send_message(worker_id, f"‚Ü©Ô∏è <b>–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ {number}. –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.</b>")
        bot.send_message(group_id, f"–†–∞–±–æ—Ç–Ω–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ {number}. –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
    else:
        bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")

    bot.answer_callback_query(call.id)

def auto_clear():
    while True:
        now = datetime.datetime.now()
        if now.hour == 2 and now.minute == 0:
            db.execute_query("DELETE FROM numbers")
            db.reset_counter()
            for user_id in user_data:
                user_data[user_id]['whatsapp'] = []
                user_data[user_id]['telegram'] = []
            bot.send_message(db.ADMIN_ID, f"üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.</b>")
            time.sleep(60)


Thread(target=auto_clear).start()

def show_back_button(message):
    markup = telebot.types.InlineKeyboardMarkup()
    back_button = telebot.types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back')
    markup.add(back_button)
    bot.send_message(message.chat.id, "üîô <b>–ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</b>", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'go_back')
def handle_back(call):
    show_main_menu(call.message)
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: message.text == '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø')
def request_access(message):
    user_id = message.from_user.id
    bot.send_message(config.ADMIN_ID, f"üõé <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username} (ID: {user_id}).</b>", reply_markup=admin_approval_markup(user_id))
    bot.send_message(message.chat.id, "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.</b>")


@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ –∑–∞—è–≤–∫–∏')
def view_requests(message):
    user_id = message.from_user.id
    if str(user_id) == config.ADMIN_ID:
        pending_requests = db.fetch_all("SELECT * FROM requests WHERE status = 'pending'")
        if pending_requests:
            response = "üìù <b>–ó–∞—è–≤–∫–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>\n\n"
            markup = telebot.types.InlineKeyboardMarkup(row_width=1)
            for req in pending_requests:
                response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{req['username']} (ID: {req['user_id']})\n"
                markup.add(telebot.types.InlineKeyboardButton(f"–ó–∞—è–≤–∫–∞ –æ—Ç @{req['username']}", callback_data=f"show_request_{req['user_id']}"))
            bot.send_message(message.chat.id, response, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "üì≠ <b>–ù–µ—Ç –∑–∞—è–≤–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.</b>")
    else:
        bot.send_message(message.chat.id, "üö´ <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫.</b>")

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_request_'))
def show_request(call):
    user_id = int(call.data.split('_')[2])
    request = db.fetch_one("SELECT * FROM requests WHERE user_id = ? AND status = 'pending'", (user_id,))
    if request:
        response = f"üõé <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{request['username']} (ID: {request['user_id']})</b>\n"
        response += "–û–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –û—Ç–∫–∞–∑–∞—Ç—å?"
        bot.send_message(call.message.chat.id, response, reply_markup=admin_approval_markup(user_id))
    else:
        bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=['admin_stats'])
def admin_stats(message):
    user_id = message.from_user.id
    if str(user_id) == config.ADMIN_ID:
        response = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        for user in user_data:
            response += f"/uid{user} [@{bot.get_chat(user).username}]: WhatsApp {len(user_data[user]['whatsapp'])}/0/0/0/0 Telegram: {len(user_data[user]['telegram'])}/0\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "üö´ <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</b>")

@bot.callback_query_handler(func=lambda call: call.data.startswith('decrement_counter_'))
def decrement_counter_handler(call):
    number = call.data.split('_')[2]
    number_info = db.fetch_one("SELECT number_id, user_id, group_id FROM numbers WHERE number = ?", (number,))
    
    if number_info:
        number_id, worker_id, group_id = number_info

        db.decrement_counter()
        db.execute_query("UPDATE numbers SET failed = 1 WHERE number_id = ?", (number_id,))

        try:
            bot.edit_message_text(
                text=f"üì± <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n<b>SMS:</b> 1222\n-1",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='HTML'
            )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"Error editing message: {e}")

        if worker_id:
            service = db.get_service_by_number(number)
            bot.send_message(worker_id, f"‚ö†Ô∏è <b>–ù–æ–º–µ—Ä {service.capitalize()} <code>{number}</code> —Å–ª–µ—Ç–µ–ª! (-1)</b>", parse_mode='HTML')
            bot.send_message(group_id, f"–ù–æ–º–µ—Ä <code>{number}</code> —Å–ª–µ—Ç–µ–ª.")
    bot.answer_callback_query(call.id)

def finalize_number_status(number, chat_id, message_id):
    number_info = db.fetch_one("SELECT success, failed, issued_to, user_id, group_id FROM numbers WHERE number = ?", (number,))

    if number_info:
        success, failed, issued_to, worker_id, group_id = number_info

        if success == 0 and failed == 0:
            db.mark_successful(number)
            bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)

            if worker_id:
                service = db.get_service_by_number(number)
                bot.send_message(worker_id, f"‚úÖ <b>–í–∞—à –Ω–æ–º–µ—Ä {service.capitalize()} <code>{number}</code> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—Å—á–∏—Ç–∞–Ω! (+1)</b>", parse_mode='HTML')
                bot.send_message(group_id, f"–ù–æ–º–µ—Ä <code>{number}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞—Å—á–∏—Ç–∞–Ω.")
        else:
            bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)

def update_message_with_numbers(chat_id, user_id):
    numbers = db.fetch_all(
        "SELECT number_id, number, add_date, add_time, service FROM numbers WHERE issued_to = ? AND success = 0 AND failed = 0", 
        (user_id,)
    )
    
    markup = telebot.types.InlineKeyboardMarkup()

    if numbers:
        for entry in numbers:
            number_id = entry[0]
            number = entry[1]
            timestamp = f"{entry[2]} {entry[3]}"
            service = entry[4]

            service_emoji = "üü¢" if service == "whatsapp" else "üîµ"
            btn_text = f"{service_emoji} {timestamp} - {number}"
            markup.add(telebot.types.InlineKeyboardButton(btn_text, callback_data=f"confirm_delete_{number_id}"))

    markup.add(telebot.types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back'))

    try:
        bot.edit_message_reply_markup(chat_id, chat_id, reply_markup=markup)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"Error editing message: {e}")

@bot.message_handler(commands=['clear'])
def clear_group_chat(message):
    chat_id = message.chat.id

    if not db.is_admin(message.from_user.id):
        bot.send_message(chat_id, "üö´ <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_id = bot.get_updates()[-1].message.message_id

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–∏–∫–ª–µ, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        while True:
            try:
                bot.delete_message(chat_id, last_message_id)
                last_message_id -= 1 
            except telebot.apihelper.ApiTelegramException as e:
                if "message to delete not found" in str(e):
                    # –î–æ—Å—Ç–∏–≥–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                    break
                else:
                    print(f"Error deleting message {last_message_id}: {e}")

    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}")
        return

    bot.send_message(chat_id, "üßπ <b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.</b>")

def deactivate_decrement_button(chat_id, message_id, number):
    number_info = db.fetch_one("SELECT success, failed, user_id, group_id FROM numbers WHERE number = ?", (number,))
    if number_info:
        success, failed, user_id, group_id = number_info
        if success == 0 and failed == 0:
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton('‚ùå–°–ª—ë—Ç (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)', callback_data=f'decrement_counter_{number}', disable_web_page_preview=True)
            markup.add(btn)
            bot.edit_message_reply_markup(chat_id, message_id, reply_markup=markup)
            finalize_number_status(number, chat_id, message_id)
        elif failed == 1:
            bot.send_message(chat_id, f"–ù–æ–º–µ—Ä {number} —É–∂–µ –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π.")
        else:
            bot.send_message(chat_id, f"–ù–æ–º–µ—Ä {number} —É–∂–µ –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π.")

if __name__ == '__main__':
    add_role(config.ADMIN_ID, 'admin')
    try:
        bot.polling(none_stop=True, timeout=30)
    except KeyboardInterrupt:
        pass 